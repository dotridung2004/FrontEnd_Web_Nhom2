import 'dart:convert'; // For jsonEncode, jsonDecode, utf8
import 'package:flutter/foundation.dart' show kIsWeb; // For checking web platform
import 'package:http/http.dart' as http; // For making HTTP requests

// Import c√°c model hi·ªán c√≥
import 'models/course.dart';
import 'models/class_course.dart';
import 'models/registered_course.dart';
import 'table/user.dart';
import 'table/home_summary.dart';
import 'models/schedule.dart';
import 'models/department.dart';
import 'models/room.dart';
import 'models/major.dart';
import 'models/division.dart';
import 'models/division_detail.dart';

// üëá T·∫†O 1 CLASS M·ªöI ƒê·ªÇ CH·ª®A K·∫æT QU·∫¢ PH√ÇN TRANG
class PaginatedDivisions {
  final List<Division> divisions;
  final int totalItems;
  final int currentPage;
  final int lastPage;

  PaginatedDivisions({
    required this.divisions,
    required this.totalItems,
    required this.currentPage,
    required this.lastPage,
  });

  factory PaginatedDivisions.fromJson(Map<String, dynamic> json) {
    List<Division> divisionsList = [];
    if (json['data'] != null && json['data'] is List) {
      divisionsList = (json['data'] as List)
          .map((item) => Division.fromJson(item)) // ƒê·∫£m b·∫£o Division.fromJson kh·ªõp
          .toList();
    }

    return PaginatedDivisions(
      divisions: divisionsList,
      // ƒê·ªçc metadata t·ª´ Laravel pagination
      totalItems: json['total'] ?? 0,
      currentPage: json['current_page'] ?? 1,
      lastPage: json['last_page'] ?? 1,
    );
  }
}
// üëÜ K·∫æT TH√öC CLASS M·ªöI


class ApiService {
  // --- Singleton Pattern ---
  ApiService._internal();
  static final ApiService _instance = ApiService._internal();
  factory ApiService() {
    return _instance;
  }
  // --- End Singleton Pattern ---

  // --- Base URL Configuration ---
  static String get baseUrl {
    if (kIsWeb) {
      // D√πng localhost cho web
      return 'http://localhost:8000/api';
    } else {
      // D√πng 10.0.2.2 cho Android Emulator
      return 'http://10.0.2.2:8000/api';
    }
  }
  // --- End Base URL Configuration ---

  String? _token; // L∆∞u token x√°c th·ª±c

  // Helper t·∫°o header cho request
  Map<String, String> _getHeaders({bool needsAuth = true}) {
    final headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };
    if (needsAuth && _token != null) {
      headers['Authorization'] = 'Bearer $_token';
    }
    return headers;
  }

  // ===================================================
  // C√°c h√†m API hi·ªán c√≥ (login, fetchHomeSummary, etc.)
  // ===================================================
  Future<User> login(String email, String password) async {
    final Uri loginUrl = Uri.parse('$baseUrl/login');
    try {
      final response = await http.post(
        loginUrl,
        headers: _getHeaders(needsAuth: false),
        body: jsonEncode({'email': email, 'password': password}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final User user = User.fromJson(data['user']);

        if (data['token'] != null) {
          _token = data['token'];
          print("ƒêƒÉng nh·∫≠p th√†nh c√¥ng, Token ƒë√£ l∆∞u!");
        } else {
          print("C·∫£nh b√°o: ƒêƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c token.");
        }

        if (user.status == 'active') {
          return user;
        } else {
          throw Exception('‚ùå T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.');
        }
      } else {
        _handleApiError(response, 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
      }
    } catch (e) {
      print("L·ªói ƒëƒÉng nh·∫≠p: $e");
      if (e is Exception) rethrow;
      throw Exception('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.');
    }
  }

  Future<HomeSummary> fetchHomeSummary(int userId) async {
    final Uri url = Uri.parse('$baseUrl/users/$userId/home-summary');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        return HomeSummary.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
      } else {
        _handleApiError(response, 'L·ªói t·∫£i d·ªØ li·ªáu trang ch·ªß');
      }
    } catch (e) {
      print("fetchHomeSummary L·ªói: $e");
      rethrow;
    }
  }

  Future<List<Schedule>> fetchSchedules() async {
    final Uri url = Uri.parse('$baseUrl/schedules');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));
        List<dynamic> dataList;
        if (body is Map<String, dynamic> && body.containsKey('data')) {
          dataList = body['data'];
        } else if (body is List) {
          dataList = body;
        } else {
          throw Exception('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
        return dataList.map((item) => Schedule.fromJson(item)).toList();
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch l·ªãch h·ªçc');
      }
    } catch (e) {
      print("fetchSchedules L·ªói: $e");
      rethrow;
    }
  }

  Future<List<Course>> fetchCourses() async {
    final Uri url = Uri.parse('$baseUrl/courses');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));
        List<dynamic> dataList;
        if (body is Map<String, dynamic> && body.containsKey('data')) {
          dataList = body['data'];
        } else if (body is List) {
          dataList = body;
        } else {
          throw Exception('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
        return dataList.map((item) => Course.fromJson(item)).toList();
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch h·ªçc ph·∫ßn');
      }
    } catch (e) {
      print("fetchCourses L·ªói: $e");
      rethrow;
    }
  }

  Future<List<ClassCourse>> fetchClassCourses() async {
    final Uri url = Uri.parse('$baseUrl/class-courses');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));
        List<dynamic> dataList;
        if (body is Map<String, dynamic> && body.containsKey('data')) {
          dataList = body['data'];
        } else if (body is List) {
          dataList = body;
        } else {
          throw Exception('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
        return dataList.map((item) => ClassCourse.fromJson(item)).toList();
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch l·ªõp h·ªçc ph·∫ßn');
      }
    } catch (e) {
      print("fetchClassCourses L·ªói: $e");
      rethrow;
    }
  }

  Future<List<RegisteredCourse>> fetchRegisteredCourses() async {
    final Uri url = Uri.parse('$baseUrl/registered-courses');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));
        List<dynamic> dataList;

        if (body is List) {
          dataList = body;
        } else if (body is Map<String, dynamic> && body.containsKey('data')) {
          dataList = body['data'];
        } else {
          throw Exception('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
        return dataList.map((item) => RegisteredCourse.fromJson(item)).toList();
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω');
      }
    } catch (e) {
      print("fetchRegisteredCourses L·ªói: $e");
      rethrow;
    }
  }

  Future<List<Department>> fetchDepartments() async {
    final Uri url = Uri.parse('$baseUrl/departments');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));
        List<dynamic> dataList;
        if (body is List) {
          dataList = body;
        } else if (body is Map<String, dynamic> && body.containsKey('data')) {
          dataList = body['data'];
        } else {
          throw Exception('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
        return dataList.map((item) => Department.fromJson(item)).toList();
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch khoa');
      }
    } catch (e) {
      print("fetchDepartments L·ªói: $e");
      rethrow;
    }
  }

  Future<List<Room>> fetchRooms() async {
    final Uri url = Uri.parse('$baseUrl/rooms');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));
        List<dynamic> dataList;
        if (body is List) {
          dataList = body;
        } else if (body is Map<String, dynamic> && body.containsKey('data')) {
          dataList = body['data'];
        } else {
          throw Exception('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
        return dataList.map((item) => Room.fromJson(item)).toList();
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch ph√≤ng h·ªçc');
      }
    } catch (e) {
      print("fetchRooms L·ªói: $e");
      rethrow;
    }
  }

  Future<List<Major>> fetchMajors() async {
    final Uri url = Uri.parse('$baseUrl/majors');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));
        List<dynamic> dataList;
        if (body is List) {
          dataList = body;
        } else if (body is Map<String, dynamic> && body.containsKey('data')) {
          dataList = body['data'];
        } else {
          throw Exception('ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
        }
        return dataList.map((item) => Major.fromJson(item)).toList();
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch ng√†nh h·ªçc');
      }
    } catch (e) {
      print("fetchMajors L·ªói: $e");
      rethrow;
    }
  }

  // üëá **** B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI fetchDivisions **** üëá
  /// ---------------------------------------------------
  /// üî¨ Division Management - Fetch List (C√ì PH√ÇN TRANG & T√åM KI·∫æM)
  /// ---------------------------------------------------
  Future<PaginatedDivisions> fetchDivisions({int page = 1, String query = ''}) async {
    // X√¢y d·ª±ng URL v·ªõi tham s·ªë page v√† search (ƒë√£ encode)
    final Uri url = Uri.parse('$baseUrl/divisions?page=$page&search=${Uri.encodeComponent(query)}');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        final dynamic body = jsonDecode(utf8.decode(response.bodyBytes));

        // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng PaginatedDivisions
        return PaginatedDivisions.fromJson(body);
      } else {
        _handleApiError(response, 'L·ªói t·∫£i danh s√°ch b·ªô m√¥n');
      }
    } catch (e) {
      print("fetchDivisions L·ªói: $e");
      if (e is Exception) rethrow;
      throw Exception('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.');
    }
  }
  // üëÜ **** K·∫æT TH√öC S·ª¨A ƒê·ªîI **** üëÜ

  // ===================================================
  // üëá CRUD B·ªò M√îN (DIVISION) üëá
  // ===================================================

  /// ---------------------------------------------------
  /// üî¨ Division Management - Fetch Details
  /// ---------------------------------------------------
  Future<DivisionDetail> fetchDivisionDetails(int divisionId) async {
    final Uri url = Uri.parse('$baseUrl/divisions/$divisionId');
    try {
      final response = await http.get(url, headers: _getHeaders());
      if (response.statusCode == 200) {
        return DivisionDetail.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
      } else {
        _handleApiError(response, 'L·ªói t·∫£i chi ti·∫øt b·ªô m√¥n');
      }
    } catch (e) {
      print("fetchDivisionDetails L·ªói: $e");
      rethrow;
    }
  }

  /// ---------------------------------------------------
  /// üî¨ Division Management - Create
  /// ---------------------------------------------------
  Future<Division> createDivision(Map<String, dynamic> data) async {
    final Uri url = Uri.parse('$baseUrl/divisions');
    try {
      final response = await http.post(
        url,
        headers: _getHeaders(),
        body: jsonEncode(data),
      );
      if (response.statusCode == 201) { // 201 Created
        final responseData = jsonDecode(utf8.decode(response.bodyBytes));
        // Backend (h√†m store) ƒë√£ map s·∫µn d·ªØ li·ªáu, n√™n parse tr·ª±c ti·∫øp
        return Division.fromJson(responseData);
      } else {
        _handleApiError(response, 'L·ªói t·∫°o b·ªô m√¥n');
      }
    } catch (e) {
      print("createDivision L·ªói: $e");
      rethrow;
    }
  }

  /// ---------------------------------------------------
  /// üî¨ Division Management - Update
  /// ---------------------------------------------------
  Future<Division> updateDivision(int divisionId, Map<String, dynamic> data) async {
    final Uri url = Uri.parse('$baseUrl/divisions/$divisionId');
    try {
      final response = await http.put(
        url,
        headers: _getHeaders(),
        body: jsonEncode(data),
      );
      if (response.statusCode == 200) { // 200 OK
        final responseData = jsonDecode(utf8.decode(response.bodyBytes));
        // Backend (h√†m update) ƒë√£ map s·∫µn d·ªØ li·ªáu
        return Division.fromJson(responseData);
      } else {
        _handleApiError(response, 'L·ªói c·∫≠p nh·∫≠t b·ªô m√¥n');
      }
    } catch (e) {
      print("updateDivision L·ªói: $e");
      rethrow;
    }
  }

  /// ---------------------------------------------------
  /// üî¨ Division Management - Delete
  /// ---------------------------------------------------
  Future<void> deleteDivision(int divisionId) async {
    final Uri url = Uri.parse('$baseUrl/divisions/$divisionId');
    try {
      final response = await http.delete(url, headers: _getHeaders());
      if (response.statusCode == 204 || response.statusCode == 200) {
        return;
      } else {
        _handleApiError(response, 'L·ªói x√≥a b·ªô m√¥n');
      }
    } catch (e) {
      print("deleteDivision L·ªói: $e");
      rethrow;
    }
  }
  /// ---------------------------------------------------
  /// üî¨ Department Management - Create
  /// ---------------------------------------------------
  Future<Department> createDepartment(Map<String, dynamic> data) async {
    final Uri url = Uri.parse('$baseUrl/departments');
    try {
      final response = await http.post(
        url,
        headers: _getHeaders(),
        body: jsonEncode(data),
      );
      if (response.statusCode == 201) { // 201 Created
        return Department.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
      } else {
        _handleApiError(response, 'L·ªói t·∫°o khoa');
      }
    } catch (e) {
      print("createDepartment L·ªói: $e");
      rethrow;
    }
  }

  /// ---------------------------------------------------
  /// üî¨ Department Management - Update
  /// ---------------------------------------------------
  Future<Department> updateDepartment(int departmentId, Map<String, dynamic> data) async {
    final Uri url = Uri.parse('$baseUrl/departments/$departmentId');
    try {
      final response = await http.put(
        url,
        headers: _getHeaders(),
        body: jsonEncode(data),
      );
      if (response.statusCode == 200) { // 200 OK
        return Department.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
      } else {
        _handleApiError(response, 'L·ªói c·∫≠p nh·∫≠t khoa');
      }
    } catch (e) {
      print("updateDepartment L·ªói: $e");
      rethrow;
    }
  }

  /// ---------------------------------------------------
  /// üî¨ Department Management - Delete
  /// ---------------------------------------------------
  Future<void> deleteDepartment(int departmentId) async {
    final Uri url = Uri.parse('$baseUrl/departments/$departmentId');
    try {
      final response = await http.delete(url, headers: _getHeaders());
      if (response.statusCode == 204 || response.statusCode == 200) { // 204 No Content
        return;
      } else {
        _handleApiError(response, 'L·ªói x√≥a khoa');
      }
    } catch (e) {
      print("deleteDepartment L·ªói: $e");
      rethrow;
    }
  }
  // ===================================================
  // Private Helper Methods
  // ===================================================
  Never _handleApiError(http.Response response, String defaultMessage) {
    print(
        "L·ªói API (${response.request?.url}): ${response.statusCode} - ${response.body}");
    try {
      final errorBody = utf8.decode(response.bodyBytes);
      if (errorBody.isEmpty) {
        throw Exception('$defaultMessage (M√£ l·ªói: ${response.statusCode})');
      }
      final error = jsonDecode(errorBody);
      throw Exception(
          error['message'] ?? '$defaultMessage (M√£ l·ªói: ${response.statusCode})');
    } catch (e) {
      if (e is FormatException || e is TypeError || e is Exception) {
        throw Exception('$defaultMessage (M√£ l·ªói: ${response.statusCode}) - Ph·∫£n h·ªìi: ${utf8.decode(response.bodyBytes)}');
      }
      rethrow;
    }
  }
} // End of ApiService class