import 'package:flutter/material.dart';
// import '../api_service.dart'; // S·∫Ω d√πng sau
// import '../models/department_detail.dart'; // S·∫Ω d√πng sau

// --- D·ªÆ LI·ªÜU GI·∫¢ (MOCK DATA) ---

class MockTeacherInfo {
  final String id;
  final String code;
  final String name;
  final String email;
  final String phone;
  MockTeacherInfo(this.id, this.code, this.name, this.email, this.phone);
}

class MockMajorInfo {
  final String id;
  final String name;
  MockMajorInfo(this.id, this.name);
}

// üëá **** B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI **** üëá
// Th√™m l·∫°i MockDivisionInfo
class MockDivisionInfo {
  final String id;
  final String code;
  final String name;
  final String description;
  MockDivisionInfo(this.id, this.code, this.name, this.description);
}

// D·ªØ li·ªáu chi ti·∫øt c·ªßa 1 Khoa (Th√™m l·∫°i B·ªô m√¥n)
class MockDepartmentDetail {
  final String code = 'CNTT';
  final String name = 'C√¥ng ngh·ªá th√¥ng tin';
  final int teacherCount = 4;
  final int divisionCount = 3; // (Th√™m l·∫°i)
  final String description =
      'Khoa C√¥ng ngh·ªá Th√¥ng tin l√† n∆°i ƒë√†o t·∫°o v√† nghi√™n c·ª©u c√°c lƒ©nh v·ª±c li√™n quan ƒë·∫øn m√°y t√≠nh, ph·∫ßn m·ªÅm, h·ªá th·ªëng th√¥ng tin v√† tr√≠ tu·ªá nh√¢n t·∫°o...';

  final List<MockTeacherInfo> teachers = [
    MockTeacherInfo(
        '1', 'GV001', 'Nguy·ªÖn VƒÉn A', 'nguyenvana@tlu.edu.vn', '0123456789'),
    MockTeacherInfo(
        '2', 'GV002', 'Nguy·ªÖn VƒÉn B', 'nguyenvanb@tlu.edu.vn', '0123434569'),
    MockTeacherInfo(
        '3', 'GV003', 'Tr·∫ßn Th·ªã C', 'tranthic@tlu.edu.vn', '0123434569'),
    MockTeacherInfo(
        '4', 'GV004', 'ƒê·ªó VƒÉn An', 'dovana@tlu.edu.vn', '0123434569'),
  ];

  final List<MockMajorInfo> majors = [
    MockMajorInfo('1', 'H·ªá th·ªëng th√¥ng tin (HTTT)'),
    MockMajorInfo('2', 'K·ªπ thu·∫≠t ph·∫ßn m·ªÅm (KTPM)'),
    MockMajorInfo('3', 'Tr√≠ tu·ªá nh√¢n t·∫°o (TTNT)'),
    MockMajorInfo('4', 'An ninh m·∫°ng (ANM)'),
  ];

  // (Th√™m l·∫°i danh s√°ch b·ªô m√¥n)
  final List<MockDivisionInfo> divisions = [
    MockDivisionInfo('1', 'CNPM', 'C√¥ng ngh·ªá ph·∫ßn m·ªÅm', 'B·ªô m√¥n CNPM'),
    MockDivisionInfo('2', 'TTNT', 'Tr√≠ tu·ªá nh√¢n t·∫°o', 'B·ªô m√¥n TTNT'),
    MockDivisionInfo('3', 'HTTT', 'H·ªá th·ªëng th√¥ng tin', 'B·ªô m√¥n HTTT'),
  ];
}
// üëÜ **** K·∫æT TH√öC S·ª¨A ƒê·ªîI **** üëÜ
// --- H·∫æT D·ªÆ LI·ªÜU GI·∫¢ ---

class DepartmentDetailScreen extends StatefulWidget {
  final int departmentId; // ID n√†y s·∫Ω d√πng ƒë·ªÉ g·ªçi API

  const DepartmentDetailScreen({
    Key? key,
    required this.departmentId,
  }) : super(key: key);

  @override
  State<DepartmentDetailScreen> createState() => _DepartmentDetailScreenState();
}

class _DepartmentDetailScreenState extends State<DepartmentDetailScreen> {
  final Color tluBlue = const Color(0xFF005A9C);
  // final ApiService _apiService = ApiService(); // S·∫Ω d√πng sau

  // State
  late MockDepartmentDetail _departmentDetail;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchData();
  }

  Future<void> _fetchData() async {
    setState(() { _isLoading = true; });

    // TODO: G·ªçi API b·∫±ng widget.departmentId
    // final data = await _apiService.fetchDepartmentDetails(widget.departmentId);

    await Future.delayed(Duration(seconds: 1));

    setState(() {
      _departmentDetail = MockDepartmentDetail();
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('TH√îNG TIN KHOA'),
        backgroundColor: tluBlue,
        foregroundColor: Colors.white,
        elevation: 0,
        automaticallyImplyLeading: false,
        actions: [
          IconButton(
            icon: Icon(Icons.close, color: Colors.white),
            onPressed: () => Navigator.of(context).pop(),
          )
        ],
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildSectionTitle('Th√¥ng tin c∆° b·∫£n'),
            _buildBasicInfo(_departmentDetail),
            const SizedBox(height: 24),

            _buildSectionTitle(
                'Danh s√°ch gi·∫£ng vi√™n (${_departmentDetail.teachers.length})'),
            _buildTeachersTable(_departmentDetail.teachers),
            const SizedBox(height: 24),

            _buildSectionTitle(
                'Danh s√°ch ng√†nh (${_departmentDetail.majors.length})'),
            _buildMajorsList(_departmentDetail.majors),
            const SizedBox(height: 24),

            // üëá **** B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI **** üëá
            _buildSectionTitle(
                'Danh s√°ch b·ªô m√¥n (${_departmentDetail.divisions.length})'),
            _buildDivisionsTable(_departmentDetail.divisions),
            // üëÜ **** K·∫æT TH√öC S·ª¨A ƒê·ªîI **** üëÜ
          ],
        ),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(16.0),
        color: Colors.white,
        child: ElevatedButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Quay l·∫°i', style: TextStyle(fontSize: 16)),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.grey.shade600,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
          ),
        ),
      ),
    );
  }

  // --- C√ÅC WIDGET HELPER ---

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16.0),
      child: Text(
        title,
        style: TextStyle(
            fontSize: 18, fontWeight: FontWeight.bold, color: tluBlue),
      ),
    );
  }

  Widget _buildBasicInfo(MockDepartmentDetail detail) {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(child: _buildReadOnlyTextField('M√£ khoa:', detail.code)),
            const SizedBox(width: 16),
            Expanded(child: _buildReadOnlyTextField('T√™n khoa:', detail.name)),
          ],
        ),
        const SizedBox(height: 16),
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(child: _buildReadOnlyTextField(
                'S·ªë l∆∞·ª£ng gi·∫£ng vi√™n:', detail.teacherCount.toString())),
            const SizedBox(width: 16),
            // üëá **** B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI **** üëá
            Expanded(child: _buildReadOnlyTextField(
                'S·ªë l∆∞·ª£ng b·ªô m√¥n:', detail.divisionCount.toString())),
            // üëÜ **** K·∫æT TH√öC S·ª¨A ƒê·ªîI **** üëÜ
          ],
        ),
        const SizedBox(height: 16),
        _buildReadOnlyTextField('M√¥ t·∫£:', detail.description, maxLines: 4),
      ],
    );
  }

  Widget _buildTeachersTable(List<MockTeacherInfo> teachers) {
    return Container(
      width: double.infinity,
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: ConstrainedBox(
          constraints: BoxConstraints(minWidth: MediaQuery.of(context).size.width * 0.7),
          child: DataTable(
            headingRowColor: MaterialStateProperty.all(Colors.grey.shade200),
            border: TableBorder.all(color: Colors.grey.shade300, width: 1),
            columns: [
              DataColumn(label: Text('STT', style: TextStyle(fontWeight: FontWeight.bold))),
              DataColumn(label: Text('M√£ gi·∫£ng vi√™n', style: TextStyle(fontWeight: FontWeight.bold))),
              DataColumn(label: Text('H·ªç t√™n', style: TextStyle(fontWeight: FontWeight.bold))),
              DataColumn(label: Text('Email', style: TextStyle(fontWeight: FontWeight.bold))),
              DataColumn(label: Text('SƒêT', style: TextStyle(fontWeight: FontWeight.bold))),
            ],
            rows: List.generate(teachers.length, (index) {
              final teacher = teachers[index];
              return DataRow(cells: [
                DataCell(Text((index + 1).toString())),
                DataCell(Text(teacher.code)),
                DataCell(Text(teacher.name)),
                DataCell(Text(teacher.email)),
                DataCell(Text(teacher.phone)),
              ]);
            }),
          ),
        ),
      ),
    );
  }

  Widget _buildMajorsList(List<MockMajorInfo> majors) {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(4),
      ),
      child: ListView.separated(
        shrinkWrap: true,
        physics: NeverScrollableScrollPhysics(),
        itemCount: majors.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(majors[index].name),
            leading: Text((index + 1).toString()),
          );
        },
        separatorBuilder: (context, index) =>
            Divider(height: 1, color: Colors.grey.shade300),
      ),
    );
  }

  // üëá **** B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI **** üëá
  // (Th√™m l·∫°i h√†m build b·∫£ng b·ªô m√¥n)
  Widget _buildDivisionsTable(List<MockDivisionInfo> divisions) {
    return Container(
      width: double.infinity,
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: ConstrainedBox(
          constraints: BoxConstraints(minWidth: MediaQuery.of(context).size.width * 0.7),
          child: DataTable(
            headingRowColor: MaterialStateProperty.all(Colors.grey.shade200),
            border: TableBorder.all(color: Colors.grey.shade300, width: 1),
            columns: [
              DataColumn(label: Text('STT', style: TextStyle(fontWeight: FontWeight.bold))),
              DataColumn(label: Text('M√£ b·ªô m√¥n', style: TextStyle(fontWeight: FontWeight.bold))),
              DataColumn(label: Text('T√™n b·ªô m√¥n', style: TextStyle(fontWeight: FontWeight.bold))),
              DataColumn(label: Text('M√¥ t·∫£', style: TextStyle(fontWeight: FontWeight.bold))),
            ],
            rows: List.generate(divisions.length, (index) {
              final division = divisions[index];
              return DataRow(cells: [
                DataCell(Text((index + 1).toString())),
                DataCell(Text(division.code)),
                DataCell(Text(division.name)),
                DataCell(Text(division.description)),
              ]);
            }),
          ),
        ),
      ),
    );
  }
  // üëÜ **** K·∫æT TH√öC S·ª¨A ƒê·ªîI **** üëÜ

  Widget _buildReadOnlyTextField(String label, String value, {int? maxLines = 1}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: TextStyle(fontSize: 14, color: Colors.grey.shade700),
        ),
        const SizedBox(height: 4),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(12.0),
          decoration: BoxDecoration(
            color: Colors.grey.shade100,
            border: Border.all(color: Colors.grey.shade300),
            borderRadius: BorderRadius.circular(4.0),
          ),
          child: Text(
            value,
            maxLines: maxLines,
            overflow: (maxLines ?? 0) > 1 ? TextOverflow.ellipsis : null,
          ),
        ),
      ],
    );
  }
}