import 'package:flutter/material.dart';
import '../api_service.dart';
import '../models/division.dart';
import '../models/department.dart'; // Import Department ƒë·ªÉ d√πng trong Dropdown
import '../models/course.dart';    // Import Course ƒë·ªÉ xem chi ti·∫øt
import '../table/user.dart';       // Import User ƒë·ªÉ xem chi ti·∫øt
import '../models/division_detail.dart'; // Import model chi ti·∫øt
import 'dart:async'; // Import ƒë·ªÉ s·ª≠ d·ª•ng Timer (cho debounce)
import 'package:collection/collection.dart'; // Import collection

class DivisionScreen extends StatefulWidget {
  const DivisionScreen({Key? key}) : super(key: key);

  @override
  _DivisionScreenState createState() => _DivisionScreenState();
}

class _DivisionScreenState extends State<DivisionScreen> {
  // --- Gi·ªØ nguy√™n c√°c bi·∫øn m√†u s·∫Øc, state, initState, dispose ---
  final Color tluBlue = const Color(0xFF005A9C);
  final Color iconViewColor = Colors.blue;
  final Color iconEditColor = Colors.green;
  final Color iconDeleteColor = Colors.red;
  final Color cancelColor = Colors.red;
  final Color confirmColor = Colors.green.shade600;

  // X√≥a Future, thay b·∫±ng state
  // Future<List<Division>>? _divisionsFuture;
  final ApiService _apiService = ApiService();
  List<Department> _departments = [];
  bool _isLoadingDepartments = false;

  // --- State cho Ph√¢n trang v√† T√¨m ki·∫øm ---
  List<Division> _divisions = []; // Ch·ªâ l∆∞u danh s√°ch c·ªßa trang hi·ªán t·∫°i
  int _currentPage = 1;
  int _lastPage = 1;
  int _totalItems = 0;
  bool _isLoading = true; // C·ªù loading ch√≠nh
  String _currentSearchQuery = '';
  final TextEditingController _searchController = TextEditingController();
  Timer? _debounce;
  // ------------------------------------

  @override
  void initState() {
    super.initState();
    _loadInitialData(); // T·∫£i khoa v√† trang ƒë·∫ßu ti√™n
    _searchController.addListener(_onSearchChanged);
  }

  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    _debounce?.cancel();
    super.dispose();
  }

  // H√†m t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu (Khoa v√† B·ªô m√¥n trang 1)
  Future<void> _loadInitialData() async {
    await _fetchDepartments(); // T·∫£i khoa tr∆∞·ªõc
    await _fetchDivisions(page: 1, query: _currentSearchQuery); // T·∫£i trang ƒë·∫ßu ti√™n
  }

  // H√†m t·∫£i danh s√°ch khoa
  Future<void> _fetchDepartments() async {
    if (_isLoadingDepartments) return;
    if (mounted) setState(() { _isLoadingDepartments = true; });
    try {
      _departments = await _apiService.fetchDepartments();
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('L·ªói t·∫£i danh s√°ch khoa: $e')),
      );
    } finally {
      if (mounted) {
        setState(() { _isLoadingDepartments = false; });
      }
    }
  }

  // --- H√ÄM M·ªöI: T·∫£i d·ªØ li·ªáu b·ªô m√¥n (c√≥ ph√¢n trang v√† t√¨m ki·∫øm) ---
  Future<void> _fetchDivisions({required int page, required String query}) async {
    if (!mounted) return;
    setState(() {
      _isLoading = true; // B·∫≠t loading
    });

    try {
      final paginatedData = await _apiService.fetchDivisions(page: page, query: query);
      if (mounted) {
        setState(() {
          _divisions = paginatedData.divisions; // C·∫≠p nh·∫≠t danh s√°ch
          _currentPage = paginatedData.currentPage;
          _lastPage = paginatedData.lastPage;
          _totalItems = paginatedData.totalItems;
          _isLoading = false; // T·∫Øt loading
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() { _isLoading = false; }); // T·∫Øt loading d√π l·ªói
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('L·ªói t·∫£i danh s√°ch b·ªô m√¥n: $e'), backgroundColor: Colors.red),
        );
      }
    }
  }
  // --- K·∫æT TH√öC H√ÄM M·ªöI ---

  // H√†m refresh (t·∫£i l·∫°i trang hi·ªán t·∫°i ho·∫∑c v·ªÅ trang 1)
  void _refreshDivisionList({bool goToFirstPage = false}) {
    if (goToFirstPage) {
      // Khi Th√™m m·ªõi, v·ªÅ trang 1 v√† x√≥a t√¨m ki·∫øm
      _currentSearchQuery = '';
      _searchController.clear();
      _fetchDivisions(page: 1, query: '');
    } else {
      // Khi S·ª≠a/X√≥a, t·∫£i l·∫°i trang hi·ªán t·∫°i
      _fetchDivisions(page: _currentPage, query: _currentSearchQuery);
    }
  }

  // --- H√†m x·ª≠ l√Ω khi n·ªôi dung √¥ t√¨m ki·∫øm thay ƒë·ªïi ---
  void _onSearchChanged() {
    _debounce?.cancel();
    _debounce = Timer(const Duration(milliseconds: 500), () {
      // Khi t√¨m ki·∫øm, lu√¥n b·∫Øt ƒë·∫ßu t·ª´ trang 1
      _currentSearchQuery = _searchController.text;
      _fetchDivisions(page: 1, query: _currentSearchQuery);
    });
  }
  // --- K·∫æT TH√öC ---

  // (X√≥a h√†m _filterDivisions v√¨ kh√¥ng c√≤n d√πng)

  @override
  Widget build(BuildContext context) {
    // Kh√¥ng d√πng FutureBuilder n·ªØa, ch·ªâ d√πng _buildContent
    return _buildContent(context, _divisions);
  }

  Widget _buildContent(BuildContext context, List<Division> divisionsToDisplay) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              ElevatedButton.icon(
                onPressed: _isLoadingDepartments ? null : () => _showAddEditDivisionDialog(null),
                icon: Icon(Icons.add, color: Colors.white, size: 20),
                label: Text("Th√™m b·ªô m√¥n", style: TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.w600)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: tluBlue,
                  padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
                ),
              ),
              Container(
                width: 300,
                child: TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: "T√¨m ki·∫øm theo t√™n, m√£, khoa...", // S·ª≠a hint text
                    prefixIcon: Icon(Icons.search),
                    suffixIcon: _searchController.text.isNotEmpty
                        ? IconButton(
                        icon: Icon(Icons.clear, size: 20),
                        onPressed: () {
                          _searchController.clear();
                        }
                    )
                        : null,
                    border: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide(color: Colors.grey.shade300)),
                    enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide(color: Colors.grey.shade300)),
                    filled: true,
                    fillColor: Colors.white,
                    contentPadding: const EdgeInsets.symmetric(vertical: 12.0),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 24),
          Container(
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8.0),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: LayoutBuilder(builder: (context, constraints) {
              // B·ªçc trong AnimatedSwitcher ƒë·ªÉ c√≥ hi·ªáu ·ª©ng m·ªù khi t·∫£i
              return AnimatedCrossFade(
                duration: Duration(milliseconds: 300),
                // Hi·ªÉn th·ªã loading overlay
                firstChild: SizedBox(height: 400, child: Center(child: CircularProgressIndicator())), // TƒÉng chi·ªÅu cao loading
                // Hi·ªÉn th·ªã b·∫£ng
                secondChild: Column( // B·ªçc B·∫£ng v√† N√∫t Ph√¢n trang
                  children: [
                    SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: ConstrainedBox(
                        constraints: BoxConstraints(minWidth: constraints.maxWidth),
                        child: DataTable(
                          headingRowColor: MaterialStateProperty.all(tluBlue),
                          headingTextStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                          // X√≥a c·ªôt "M√£ b·ªô m√¥n" v√† "S·ªë l∆∞·ª£ng MH"
                          columns: const [
                            DataColumn(label: Text('STT')),
                            // DataColumn(label: Text('M√£ b·ªô m√¥n')), // <-- ƒê√£ x√≥a
                            DataColumn(label: Text('T√™n b·ªô m√¥n')),
                            DataColumn(label: Text('Khoa')),
                            DataColumn(label: Text('S·ªë l∆∞·ª£ng GV')),
                            // DataColumn(label: Text('S·ªë l∆∞·ª£ng MH')), // <-- ƒê√£ x√≥a
                            DataColumn(label: Text('Thao t√°c')),
                          ],
                          rows: List.generate(
                            divisionsToDisplay.length,
                            // T√≠nh STT theo trang (10 m·ª•c/trang)
                                (index) => _buildDataRow(index + 1 + (_currentPage - 1) * 10, divisionsToDisplay[index]),
                          ),
                        ),
                      ),
                    ),
                    // üëá TH√äM B·ªò ƒêI·ªÄU KHI·ªÇN PH√ÇN TRANG üëá
                    if (_lastPage > 1) // Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ nhi·ªÅu h∆°n 1 trang
                      _buildPaginationControls(),
                    // üëÜ K·∫æT TH√öC PH√ÇN TRANG üëÜ
                  ],
                ),
                crossFadeState: _isLoading ? CrossFadeState.showFirst : CrossFadeState.showSecond,
              );
            }),
          ),
          // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
          if (!_isLoading && divisionsToDisplay.isEmpty)
            Padding(
              padding: const EdgeInsets.only(top: 20.0),
              child: Center(child: Text(_currentSearchQuery.isEmpty ? 'Ch∆∞a c√≥ b·ªô m√¥n n√†o.' : 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.')),
            ),
        ],
      ),
    );
  }

  // --- B·ªò ƒêI·ªÄU KHI·ªÇN PH√ÇN TRANG M·ªöI ---
  Widget _buildPaginationControls() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text('Trang $_currentPage / $_lastPage (T·ªïng: $_totalItems)'),
          Row(
            children: [
              IconButton(
                icon: Icon(Icons.first_page),
                onPressed: _currentPage > 1 ? () => _fetchDivisions(page: 1, query: _currentSearchQuery) : null,
                tooltip: 'Trang ƒë·∫ßu',
              ),
              IconButton(
                icon: Icon(Icons.navigate_before),
                onPressed: _currentPage > 1 ? () => _fetchDivisions(page: _currentPage - 1, query: _currentSearchQuery) : null,
                tooltip: 'Trang tr∆∞·ªõc',
              ),
              SizedBox(width: 16),
              IconButton(
                icon: Icon(Icons.navigate_next),
                onPressed: _currentPage < _lastPage ? () => _fetchDivisions(page: _currentPage + 1, query: _currentSearchQuery) : null,
                tooltip: 'Trang sau',
              ),
              IconButton(
                icon: Icon(Icons.last_page),
                onPressed: _currentPage < _lastPage ? () => _fetchDivisions(page: _lastPage, query: _currentSearchQuery) : null,
                tooltip: 'Trang cu·ªëi',
              ),
            ],
          ),
        ],
      ),
    );
  }
  // --- K·∫æT TH√öC ---


  DataRow _buildDataRow(int stt, Division division) {
    return DataRow(
      cells: [
        DataCell(Text(stt.toString())),
        // DataCell(Text(division.code)), // <-- ƒê√£ x√≥a
        DataCell(Text(division.name)),
        DataCell(Text(division.departmentName)),
        DataCell(Text(division.teacherCount.toString())),
        // DataCell(Text(division.courseCount.toString())), // <-- ƒê√£ x√≥a
        DataCell(
          Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: Icon(Icons.info_outline, color: iconViewColor),
                onPressed: () => _showViewDivisionDialog(division),
                tooltip: "Xem",
              ),
              IconButton(
                icon: Icon(Icons.edit_outlined, color: iconEditColor),
                onPressed: _isLoadingDepartments ? null : () => _showAddEditDivisionDialog(division),
                tooltip: "S·ª≠a",
              ),
              IconButton(
                icon: Icon(Icons.delete_outline, color: iconDeleteColor),
                onPressed: () => _showDeleteConfirmationDialog(division),
                tooltip: "X√≥a",
              ),
            ],
          ),
        ),
      ],
    );
  }

  /// Hi·ªÉn th·ªã Dialog Xem Chi Ti·∫øt B·ªô M√¥n
  void _showViewDivisionDialog(Division division) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return FutureBuilder<DivisionDetail>(
          future: _apiService.fetchDivisionDetails(division.id),
          builder: (context, snapshot) {
            Widget content;
            if (snapshot.connectionState == ConnectionState.waiting) {
              content = Center(child: Padding(padding: const EdgeInsets.all(32.0), child: CircularProgressIndicator()));
            } else if (snapshot.hasError) {
              content = Center(child: Padding(padding: const EdgeInsets.all(32.0), child: Text("L·ªói t·∫£i chi ti·∫øt: ${snapshot.error}")));
            } else if (snapshot.hasData) {
              final detail = snapshot.data!;
              content = SingleChildScrollView(
                padding: const EdgeInsets.all(24.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text("Th√¥ng tin c∆° b·∫£n", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: tluBlue)),
                    SizedBox(height: 16),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Expanded(child: _buildReadOnlyField("T√™n b·ªô m√¥n:", detail.name)),
                        SizedBox(width: 16),
                        Expanded(child: _buildReadOnlyField("Khoa:", detail.departmentName)),
                      ],
                    ),
                    SizedBox(height: 16),
                    _buildReadOnlyField("M√¥ t·∫£:", detail.description ?? 'Ch∆∞a c√≥ m√¥ t·∫£', isMultiLine: true),
                    SizedBox(height: 16),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Expanded(child: _buildReadOnlyField("S·ªë l∆∞·ª£ng gi·∫£ng vi√™n:", detail.teacherCount.toString())),
                        SizedBox(width: 16),
                        // X√≥a S·ªë l∆∞·ª£ng m√¥n h·ªçc
                        Expanded(child: Container()), // Placeholder
                      ],
                    ),
                    Divider(height: 32),
                    Text("Danh s√°ch gi·∫£ng vi√™n", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: tluBlue)),
                    SizedBox(height: 16),
                    _buildTeacherTable(detail.teachersList),
                    // X√≥a Danh s√°ch m√¥n h·ªçc
                  ],
                ),
              );
            } else {
              content = Center(child: Padding(padding: const EdgeInsets.all(32.0), child: Text("Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt.")));
            }

            return AlertDialog(
              titlePadding: const EdgeInsets.all(0),
              title: Container(
                padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
                color: tluBlue,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text('Th√¥ng Tin B·ªô M√¥n', style: TextStyle(color: Colors.white)),
                    IconButton(
                      icon: Icon(Icons.close, color: Colors.white),
                      onPressed: () => Navigator.of(context).pop(),
                      padding: EdgeInsets.zero,
                      constraints: BoxConstraints(),
                    )
                  ],
                ),
              ),
              contentPadding: const EdgeInsets.all(0),
              content: ConstrainedBox(
                constraints: BoxConstraints(
                  maxWidth: MediaQuery.of(context).size.width * 0.7,
                  maxHeight: MediaQuery.of(context).size.height * 0.8,
                ),
                child: content,
              ),
              actionsPadding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
              actions: <Widget>[
                ElevatedButton(
                  child: Text('X√°c nh·∫≠n'),
                  style: ElevatedButton.styleFrom(backgroundColor: confirmColor, foregroundColor: Colors.white, shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8))),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ],
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
            );
          },
        );
      },
    );
  }

  Widget _buildReadOnlyField(String label, String value, {bool isMultiLine = false}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: TextStyle(fontWeight: FontWeight.w600, color: Colors.black54)),
        SizedBox(height: 4),
        Container(
          width: double.infinity,
          padding: EdgeInsets.symmetric(horizontal: 12, vertical: isMultiLine ? 12 : 10),
          constraints: BoxConstraints(minHeight: isMultiLine ? 80 : 40),
          decoration: BoxDecoration(
            color: Colors.grey[100],
            borderRadius: BorderRadius.circular(8.0),
            border: Border.all(color: Colors.grey.shade300),
          ),
          child: Text(value.isNotEmpty ? value : '(tr·ªëng)', style: TextStyle(color: value.isNotEmpty ? Colors.black87 : Colors.grey)),
        ),
      ],
    );
  }

  Widget _buildTeacherTable(List<User> teachers) {
    if (teachers.isEmpty) {
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 8.0),
        child: Text('Kh√¥ng c√≥ gi·∫£ng vi√™n n√†o thu·ªôc b·ªô m√¥n n√†y.'),
      );
    }
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        headingRowColor: MaterialStateProperty.all(Colors.grey[200]),
        columns: const [
          DataColumn(label: Text('STT')),
          DataColumn(label: Text('M√£ gi·∫£ng vi√™n')),
          DataColumn(label: Text('H·ªç t√™n')),
          DataColumn(label: Text('Email')),
          DataColumn(label: Text('SƒêT')),
        ],
        rows: List.generate(teachers.length, (index) {
          final teacher = teachers[index];
          return DataRow(cells: [
            DataCell(Text((index + 1).toString())),
            DataCell(Text('GV${teacher.id.toString().padLeft(3,'0')}')),
            DataCell(Text(teacher.name)),
            DataCell(Text(teacher.email)),
            DataCell(Text(teacher.phoneNumber)),
          ]);
        }),
      ),
    );
  }

  // X√≥a h√†m _buildCourseTable
  // Widget _buildCourseTable(List<Course> courses) { ... }

  void _showAddEditDivisionDialog(Division? division) {
    final bool isEdit = division != null;
    final _formKey = GlobalKey<FormState>();
    final _nameController = TextEditingController(text: isEdit ? division.name : '');
    final _descController = TextEditingController();
    Department? _selectedDepartment;
    Future<void>? _detailsLoadingFuture;
    final _codeControllerForAdd = TextEditingController();

    if(isEdit) {
      _detailsLoadingFuture = _apiService.fetchDivisionDetails(division!.id).then((details) {
        if (mounted) {
          _descController.text = details.description ?? '';
          _selectedDepartment = _departments.firstWhereOrNull(
                  (d) => d.name == details.departmentName
          );
        }
      }).catchError((error) { /*...*/ });
    }
    if (isEdit && _departments.isNotEmpty) {
      _selectedDepartment = _departments.firstWhereOrNull(
              (d) => d.name == division!.departmentName
      );
    }

    bool _isSaving = false;

    Future<void> _saveDivision(VoidCallback onSavingStateChange) async {
      if (_formKey.currentState!.validate()) {
        onSavingStateChange();
        final data = {
          'name': _nameController.text,
          'department_id': _selectedDepartment?.id,
          'description': _descController.text,
          if (!isEdit) 'code': _codeControllerForAdd.text,
        };

        try {
          if (isEdit) {
            await _apiService.updateDivision(division!.id, data);
          } else {
            await _apiService.createDivision(data);
          }
          if (!mounted) return;
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(isEdit ? 'C·∫≠p nh·∫≠t b·ªô m√¥n th√†nh c√¥ng!' : 'Th√™m b·ªô m√¥n th√†nh c√¥ng!'),
              backgroundColor: Colors.green, // <-- Th√™m d√≤ng n√†y
            ),
          );
          Navigator.of(context).pop();
          _refreshDivisionList(goToFirstPage: !isEdit); // V·ªÅ trang 1 n·∫øu Th√™m m·ªõi
        }catch (e) {
          if (!mounted) return;
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('L·ªói: $e'), backgroundColor: Colors.red));
          onSavingStateChange();
        }
      }
    }
    Future<bool> _showExitConfirmationDialog() async {
      final result = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
          title: Center(child: Text('Th√¥ng b√°o!', style: TextStyle(fontWeight: FontWeight.bold))),
          content: Text(
            isEdit ? 'B·∫°n c√≥ mu·ªën tho√°t kh·ªèi ch·ª©c nƒÉng s·ª≠a th√¥ng tin b·ªô m√¥n?' : 'B·∫°n c√≥ mu·ªën tho√°t kh·ªèi ch·ª©c nƒÉng th√™m th√¥ng tin b·ªô m√¥n m·ªõi?',
            textAlign: TextAlign.center,
          ),
          actionsAlignment: MainAxisAlignment.center,
          actions: <Widget>[
            OutlinedButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: Text('H·ªßy'),
              style: OutlinedButton.styleFrom(
                foregroundColor: cancelColor, side: BorderSide(color: cancelColor),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
            SizedBox(width: 10),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: Text('X√°c nh·∫≠n'),
              style: ElevatedButton.styleFrom(
                backgroundColor: confirmColor, foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
          ],
        ),
      );
      return result ?? false;
    }

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return StatefulBuilder(
            builder: (context, setDialogState) {
              Widget formContent = FutureBuilder(
                  future: _detailsLoadingFuture,
                  builder: (context, snapshot) {
                    if (isEdit && snapshot.connectionState == ConnectionState.waiting) {
                      return Center(child: Padding(padding: const EdgeInsets.all(20.0), child: CircularProgressIndicator(strokeWidth: 2)));
                    }
                    if (isEdit && snapshot.connectionState == ConnectionState.done && _selectedDepartment == null && division != null){
                      _selectedDepartment = _departments.firstWhereOrNull(
                              (d) => d.name == division.departmentName
                      );
                    }

                    return Form(
                      key: _formKey,
                      child: SingleChildScrollView(
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: <Widget>[
                            if (!isEdit) ...[ // Layout KHI TH√äM M·ªöI
                              Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Expanded(child: _buildFormField(_codeControllerForAdd, 'M√£ b·ªô m√¥n: *', 'Nh·∫≠p m√£ b·ªô m√¥n')),
                                  SizedBox(width: 16),
                                  Expanded(child: _buildFormField(_nameController, 'T√™n b·ªô m√¥n: *', 'Nh·∫≠p t√™n b·ªô m√¥n')),
                                ],
                              ),
                              SizedBox(height: 16),
                              _buildDepartmentDropdown( (newValue) { setDialogState(() => _selectedDepartment = newValue); }, _selectedDepartment),

                            ] else ... [ // Layout KHI CH·ªàNH S·ª¨A (Theo ·∫£nh)
                              Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Expanded(child: _buildFormField(_nameController, 'T√™n b·ªô m√¥n: *', 'Nh·∫≠p t√™n b·ªô m√¥n')),
                                  SizedBox(width: 16),
                                  Expanded(child: _buildDepartmentDropdown( (newValue) { setDialogState(() => _selectedDepartment = newValue); }, _selectedDepartment)),
                                ],
                              ),
                            ],
                            SizedBox(height: 16),
                            Text('M√¥ t·∫£:', style: TextStyle(fontWeight: FontWeight.w600)),
                            SizedBox(height: 4),
                            TextFormField(
                              controller: _descController,
                              decoration: InputDecoration(
                                hintText: 'Nh·∫≠p m√¥ t·∫£',
                                border: OutlineInputBorder(),
                                contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                              ),
                              maxLines: 4,
                              minLines: 3,
                            ),
                          ],
                        ),
                      ),
                    );
                  }
              );
              return WillPopScope(
                onWillPop: _showExitConfirmationDialog,
                child: AlertDialog(
                  titlePadding: const EdgeInsets.all(0),
                  title: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
                    color: tluBlue,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(isEdit ? 'Ch·ªânh S·ª≠a Th√¥ng Tin B·ªô M√¥n' : 'Th√™m B·ªô M√¥n M·ªõi', style: TextStyle(color: Colors.white)),
                        IconButton(
                          icon: Icon(Icons.close, color: Colors.white),
                          onPressed: () async {
                            if (await _showExitConfirmationDialog()) {
                              Navigator.of(context).pop();
                            }
                          },
                          padding: EdgeInsets.zero,
                          constraints: BoxConstraints(),
                        )
                      ],
                    ),
                  ),
                  contentPadding: const EdgeInsets.fromLTRB(24.0, 20.0, 24.0, 0),
                  content: ConstrainedBox(
                    constraints: BoxConstraints(maxWidth: 500),
                    child: formContent,
                  ),
                  actionsPadding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
                  actions: <Widget>[
                    OutlinedButton(
                      onPressed: _isSaving ? null : () async {
                        if (await _showExitConfirmationDialog()) {
                          Navigator.of(context).pop();
                        }
                      },
                      child: Text('H·ªßy'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: cancelColor, side: BorderSide(color: cancelColor),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      ),
                    ),
                    SizedBox(width: 10),
                    ElevatedButton(
                      onPressed: _isSaving ? null : () => _saveDivision(() => setDialogState(() => _isSaving = !_isSaving)),
                      child: Text(isEdit ? 'L∆∞u' : 'X√°c nh·∫≠n'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: confirmColor, foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      ),
                    ),
                  ],
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
                ),
              );
            }
        );
      },
    );
  }

  Widget _buildFormField(TextEditingController controller, String label, String hint, {bool isReadOnly = false}) {
    // --- Gi·ªØ nguy√™n ---
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: TextStyle(fontWeight: FontWeight.w600)),
        SizedBox(height: 4),
        TextFormField(
          controller: controller,
          readOnly: isReadOnly,
          decoration: InputDecoration(
            hintText: hint,
            border: OutlineInputBorder(),
            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
            filled: isReadOnly,
            fillColor: isReadOnly ? Colors.grey[100] : null,
          ),
          validator: (value) {
            if (!isReadOnly && (value == null || value.isEmpty)) {
              return 'Vui l√≤ng nh·∫≠p th√¥ng tin';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildDepartmentDropdown(ValueChanged<Department?> onChanged, Department? currentValue) {
    // --- Gi·ªØ nguy√™n ---
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Khoa: *', style: TextStyle(fontWeight: FontWeight.w600)),
        SizedBox(height: 4),
        DropdownButtonFormField<Department>(
          value: currentValue,
          hint: Text('-- Ch·ªçn Khoa qu·∫£n l√Ω --'),
          isExpanded: true,
          decoration: InputDecoration(
            border: OutlineInputBorder(),
            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
          ),
          items: _departments.map((Department department) {
            return DropdownMenuItem<Department>(
              value: department,
              child: Text(department.name),
            );
          }).toList(),
          onChanged: _isLoadingDepartments ? null : onChanged,
          validator: (value) => value == null ? 'Vui l√≤ng ch·ªçn khoa' : null,
        ),
      ],
    );
  }

  void _showDeleteConfirmationDialog(Division division) {
    // --- Gi·ªØ nguy√™n ---
    showDialog(
      context: context,
      builder: (BuildContext context) {
        bool _isDeleting = false;
        return StatefulBuilder(
            builder: (context, setDialogState) {
              return AlertDialog(
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
                title: Center(child: Text('Th√¥ng b√°o!', style: TextStyle(fontWeight: FontWeight.bold))),
                content: Text('B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a b·ªô m√¥n "${division.name}"?', textAlign: TextAlign.center),
                actionsAlignment: MainAxisAlignment.center,
                actions: <Widget>[
                  OutlinedButton(
                    onPressed: _isDeleting ? null : () => Navigator.of(context).pop(),
                    child: Text('H·ªßy'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: cancelColor, side: BorderSide(color: cancelColor),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                      padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    ),
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    onPressed: _isDeleting ? null : () async {
                      setDialogState(() { _isDeleting = true; });
                      try {
                        await _apiService.deleteDivision(division.id);
                        if (!mounted) return;
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('X√≥a b·ªô m√¥n th√†nh c√¥ng!'),
                            backgroundColor: Colors.green, // ƒê·∫£m b·∫£o b·∫°n g√µ ƒë√∫ng 'backgroundColor'
                          ),
                        );
                        Navigator.of(context).pop();
                        _refreshDivisionList(goToFirstPage: true); // V·ªÅ trang 1 sau khi x√≥a
                      } catch (e) {
                        if (!mounted) return;
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('L·ªói khi x√≥a: $e'), backgroundColor: Colors.red),
                        );
                        Navigator.of(context).pop();
                      }
                    },
                    child: Text('X√°c nh·∫≠n'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: confirmColor, foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                      padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    ),
                  ),
                ],
              );
            }
        );
      },
    );
  }

} // End of _DivisionScreenState