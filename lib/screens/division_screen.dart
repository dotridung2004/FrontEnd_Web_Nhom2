import 'package:flutter/material.dart';
import '../api_service.dart';
import '../models/division.dart';
import '../models/department.dart'; // Import Department ƒë·ªÉ d√πng trong Dropdown
import '../models/course.dart';    // Import Course ƒë·ªÉ xem chi ti·∫øt
import '../table/user.dart';       // Import User ƒë·ªÉ xem chi ti·∫øt
import '../models/division_detail.dart'; // Import model chi ti·∫øt
import 'dart:async'; // Import ƒë·ªÉ s·ª≠ d·ª•ng Timer (cho debounce)
import 'package:collection/collection.dart'; // Import collection
import 'dart:math'; // Import cho h√†m min

class DivisionScreen extends StatefulWidget {
  const DivisionScreen({Key? key}) : super(key: key);

  @override
  _DivisionScreenState createState() => _DivisionScreenState();
}

class _DivisionScreenState extends State<DivisionScreen> {
  // --- M√†u s·∫Øc ---
  final Color tluBlue = const Color(0xFF005A9C);
  final Color iconViewColor = Colors.blue;
  final Color iconEditColor = Colors.green;
  final Color iconDeleteColor = Colors.red;
  final Color cancelColor = Colors.red;
  final Color confirmColor = Colors.green.shade600;

  final ApiService _apiService = ApiService();

  // State cho Dropdown Khoa
  List<Department> _departments = [];
  bool _isLoadingDepartments = false;

  // --- State cho Ph√¢n trang v√† T√¨m ki·∫øm (FRONT-END) ---
  List<Division> _allDivisions = []; // Danh s√°ch ƒë·∫ßy ƒë·ªß
  List<Division> _filteredDivisions = []; // Danh s√°ch ƒë√£ l·ªçc
  List<Division> _pagedDivisions = []; // Danh s√°ch hi·ªÉn th·ªã tr√™n trang

  int _currentPage = 1;
  int _lastPage = 1;
  int _totalItems = 0;
  final int _rowsPerPage = 10; // C·ªë ƒë·ªãnh 10 h√†ng/trang
  bool _isLoading = true; // C·ªù loading ch√≠nh
  String _currentSearchQuery = '';
  final TextEditingController _searchController = TextEditingController();
  Timer? _debounce;
  // ------------------------------------

  @override
  void initState() {
    super.initState();
    _loadInitialData();
    _searchController.addListener(_onSearchChanged);
  }

  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    _debounce?.cancel();
    super.dispose();
  }

  // H√†m t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
  Future<void> _loadInitialData() async {
    if (mounted) setState(() { _isLoading = true; });

    try {
      // T·∫£i song song Khoa (cho dropdown) v√† B·ªô m√¥n (danh s√°ch ch√≠nh)
      final departmentsFuture = _fetchDepartments();
      // üëá **** S·ª¨A ƒê·ªîI: G·ªçi h√†m fetchDivisions m·ªõi **** üëá
      final divisionsFuture = _apiService.fetchDivisions();

      final results = await Future.wait([departmentsFuture, divisionsFuture]);

      final departments = results[0] as List<Department>;
      final divisions = results[1] as List<Division>;

      if (mounted) {
        setState(() {
          _departments = departments;
          // S·∫Øp x·∫øp danh s√°ch (v√≠ d·ª•: m·ªõi nh·∫•t l√™n ƒë·∫ßu)
          _allDivisions = divisions;
          _filteredDivisions = divisions;
          _updatePagination(divisions); // C·∫≠p nh·∫≠t ph√¢n trang
        });
      }
    } catch (e) {
      if (mounted) {
        _showSnackBar('L·ªói t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu: $e', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() { _isLoading = false; });
      }
    }
  }

  // H√†m t·∫£i danh s√°ch khoa (cho dropdown)
  Future<List<Department>> _fetchDepartments() async {
    if (mounted) setState(() { _isLoadingDepartments = true; });
    try {
      final departments = await _apiService.fetchDepartments();
      if (mounted) setState(() { _isLoadingDepartments = false; });
      return departments;
    } catch (e) {
      if (mounted) setState(() { _isLoadingDepartments = false; });
      _showSnackBar('L·ªói t·∫£i danh s√°ch khoa: $e', isError: true);
      return [];
    }
  }

  // H√†m refresh (t·∫£i l·∫°i to√†n b·ªô)
  // üëá **** S·ª¨A ƒê·ªîI: ƒê·ªïi t√™n h√†m v√† logic **** üëá
  void _refreshDivisionList({bool clearSearch = false}) {
    if (clearSearch) {
      _currentSearchQuery = '';
      _searchController.clear();
    }
    _loadInitialData(); // T·∫£i l·∫°i t·∫•t c·∫£ t·ª´ ƒë·∫ßu
  }

  // --- H√†m x·ª≠ l√Ω Ph√¢n trang & T√¨m ki·∫øm (FRONT-END) ---

  // (H√†m n√†y ƒë∆∞·ª£c g·ªçi b·ªüi Debounce)
  void _onSearchChanged() {
    _debounce?.cancel();
    _debounce = Timer(const Duration(milliseconds: 300), () {
      _currentSearchQuery = _searchController.text;
      _filterAndPaginateList(); // (G·ªçi h√†m l·ªçc)
    });
  }

  // (H√†m m·ªõi: L·ªçc danh s√°ch)
  void _filterAndPaginateList() {
    if (!mounted) return;
    setState(() {
      // 1. L·ªçc
      if (_currentSearchQuery.isEmpty) {
        _filteredDivisions = List.from(_allDivisions);
      } else {
        final query = _currentSearchQuery.toLowerCase();
        _filteredDivisions = _allDivisions.where((division) {
          return division.name.toLowerCase().contains(query) ||
              division.code.toLowerCase().contains(query) ||
              division.departmentName.toLowerCase().contains(query);
        }).toList();
      }
      // 2. C·∫≠p nh·∫≠t ph√¢n trang
      _updatePagination(_filteredDivisions, goToFirstPage: true);
    });
  }

  // (H√†m m·ªõi: C·∫≠p nh·∫≠t bi·∫øn ph√¢n trang)
  void _updatePagination(List<Division> list, {bool goToFirstPage = false}) {
    if (!mounted) return;
    setState(() {
      _totalItems = list.length;
      _lastPage = (_totalItems / _rowsPerPage).ceil();
      if (_lastPage == 0) _lastPage = 1;

      if (goToFirstPage) {
        _currentPage = 1;
      } else {
        if (_currentPage > _lastPage) _currentPage = _lastPage;
      }

      // 3. L·∫•y danh s√°ch cho trang hi·ªán t·∫°i
      int startIndex = (_currentPage - 1) * _rowsPerPage;
      int endIndex = min(startIndex + _rowsPerPage, _totalItems);

      _pagedDivisions = (startIndex < _totalItems)
          ? list.sublist(startIndex, endIndex)
          : [];
    });
  }

  // (H√†m m·ªõi: Chuy·ªÉn trang)
  void _goToPage(int page) {
    if (page < 1 || page > _lastPage || page == _currentPage) return;
    if (mounted) {
      setState(() {
        _currentPage = page;
        _updatePagination(_filteredDivisions); // C·∫≠p nh·∫≠t l·∫°i ds trang
      });
    }
  }
  // --- K·∫øt th√∫c Ph√¢n trang & T√¨m ki·∫øm ---

  @override
  Widget build(BuildContext context) {
    // üëá **** S·ª¨A ƒê·ªîI: D√πng _pagedDivisions **** üëá
    return _buildContent(context, _pagedDivisions);
  }

  Widget _buildContent(BuildContext context, List<Division> divisionsToDisplay) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              ElevatedButton.icon(
                onPressed: _isLoadingDepartments ? null : () => _showAddEditDivisionDialog(null),
                icon: Icon(Icons.add, color: Colors.white, size: 20),
                label: Text("Th√™m b·ªô m√¥n", style: TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.w600)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: tluBlue,
                  padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
                ),
              ),
              Container(
                width: 300,
                child: TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: "T√¨m ki·∫øm theo t√™n, m√£, khoa...",
                    prefixIcon: Icon(Icons.search),
                    suffixIcon: _searchController.text.isNotEmpty
                        ? IconButton(
                        icon: Icon(Icons.clear, size: 20),
                        onPressed: () { _searchController.clear(); }
                    ) : null,
                    border: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide(color: Colors.grey.shade300)),
                    enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide(color: Colors.grey.shade300)),
                    filled: true,
                    fillColor: Colors.white,
                    contentPadding: const EdgeInsets.symmetric(vertical: 12.0),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 24),
          Container(
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8.0),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: LayoutBuilder(builder: (context, constraints) {
              return AnimatedCrossFade(
                duration: Duration(milliseconds: 300),
                firstChild: SizedBox(height: 400, child: Center(child: CircularProgressIndicator())),
                secondChild: Column(
                  children: [
                    SingleChildScrollView(
                      scrollDirection: Axis.horizontal,
                      child: ConstrainedBox(
                        constraints: BoxConstraints(minWidth: constraints.maxWidth),
                        child: DataTable(
                          headingRowColor: MaterialStateProperty.all(tluBlue),
                          headingTextStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                          columns: const [
                            DataColumn(label: Text('STT')),
                            // (Th√™m l·∫°i c·ªôt M√£ b·ªô m√¥n)
                            DataColumn(label: Text('M√£ b·ªô m√¥n')),
                            DataColumn(label: Text('T√™n b·ªô m√¥n')),
                            DataColumn(label: Text('Khoa')),
                            DataColumn(label: Text('S·ªë l∆∞·ª£ng GV')),
                            DataColumn(label: Text('Thao t√°c')),
                          ],
                          rows: List.generate(
                            divisionsToDisplay.length,
                            // (T√≠nh STT theo trang)
                                (index) => _buildDataRow(index + 1 + (_currentPage - 1) * _rowsPerPage, divisionsToDisplay[index]),
                          ),
                        ),
                      ),
                    ),
                    if (_lastPage > 1)
                      _buildPaginationControls(),
                  ],
                ),
                crossFadeState: _isLoading ? CrossFadeState.showFirst : CrossFadeState.showSecond,
              );
            }),
          ),
          if (!_isLoading && divisionsToDisplay.isEmpty)
            Padding(
              padding: const EdgeInsets.only(top: 20.0),
              child: Center(child: Text(_currentSearchQuery.isEmpty ? 'Ch∆∞a c√≥ b·ªô m√¥n n√†o.' : 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.')),
            ),
        ],
      ),
    );
  }

  // (B·ªô ƒëi·ªÅu khi·ªÉn ph√¢n trang - S·ª≠a logic)
  Widget _buildPaginationControls() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text('Trang $_currentPage / $_lastPage (T·ªïng: $_totalItems)'),
          Row(
            children: [
              IconButton(
                icon: Icon(Icons.first_page),
                // üëá **** S·ª¨A ƒê·ªîI: G·ªçi _goToPage **** üëá
                onPressed: _currentPage > 1 ? () => _goToPage(1) : null,
                tooltip: 'Trang ƒë·∫ßu',
              ),
              IconButton(
                icon: Icon(Icons.navigate_before),
                onPressed: _currentPage > 1 ? () => _goToPage(_currentPage - 1) : null,
                tooltip: 'Trang tr∆∞·ªõc',
              ),
              SizedBox(width: 16),
              IconButton(
                icon: Icon(Icons.navigate_next),
                onPressed: _currentPage < _lastPage ? () => _goToPage(_currentPage + 1) : null,
                tooltip: 'Trang sau',
              ),
              IconButton(
                icon: Icon(Icons.last_page),
                onPressed: _currentPage < _lastPage ? () => _goToPage(_lastPage) : null,
                tooltip: 'Trang cu·ªëi',
              ),
            ],
          ),
        ],
      ),
    );
  }


  DataRow _buildDataRow(int stt, Division division) {
    return DataRow(
      cells: [
        DataCell(Text(stt.toString())),
        // (Th√™m l·∫°i c·ªôt M√£ b·ªô m√¥n)
        DataCell(Text(division.code)),
        DataCell(Text(division.name)),
        DataCell(Text(division.departmentName)),
        DataCell(Text(division.teacherCount.toString())),
        DataCell(
          Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: Icon(Icons.info_outline, color: iconViewColor),
                onPressed: () => _showViewDivisionDialog(division),
                tooltip: "Xem",
              ),
              IconButton(
                icon: Icon(Icons.edit_outlined, color: iconEditColor),
                onPressed: _isLoadingDepartments ? null : () => _showAddEditDivisionDialog(division),
                tooltip: "S·ª≠a",
              ),
              IconButton(
                icon: Icon(Icons.delete_outline, color: iconDeleteColor),
                onPressed: () => _showDeleteConfirmationDialog(division),
                tooltip: "X√≥a",
              ),
            ],
          ),
        ),
      ],
    );
  }

  /// ---------------------------------------------------
  /// DIALOG XEM CHI TI·∫æT B·ªò M√îN (Pop-up)
  /// (ƒê√£ s·ª≠a l·∫°i c·∫•u tr√∫c)
  /// ---------------------------------------------------
  void _showViewDivisionDialog(Division division) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          titlePadding: const EdgeInsets.all(0),
          title: _buildDialogHeader('Th√¥ng Tin B·ªô M√¥n'),
          contentPadding: const EdgeInsets.all(0),
          content: Container(
            width: MediaQuery.of(context).size.width * 0.7,
            constraints: BoxConstraints(
              maxHeight: MediaQuery.of(context).size.height * 0.7,
            ),
            child: FutureBuilder<DivisionDetail>(
              future: _apiService.fetchDivisionDetails(division.id),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: Padding(padding: const EdgeInsets.all(32.0), child: CircularProgressIndicator()));
                }
                if (snapshot.hasError) {
                  return SingleChildScrollView(
                    padding: const EdgeInsets.all(24.0),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.error_outline, color: Colors.red, size: 48),
                        SizedBox(height: 16),
                        Text("L·ªói t·∫£i chi ti·∫øt", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                        SizedBox(height: 8),
                        Text("L·ªói: ${snapshot.error}", textAlign: TextAlign.center),
                      ],
                    ),
                  );
                }
                if (snapshot.hasData) {
                  return _buildDetailContent(snapshot.data!);
                }
                return Center(child: Padding(padding: const EdgeInsets.all(32.0), child: Text("Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt.")));
              },
            ),
          ),
          actionsPadding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
          actions: <Widget>[
            ElevatedButton(
              child: Text('Quay l·∫°i'), // (ƒê·ªïi n√∫t 'X√°c nh·∫≠n' th√†nh 'Quay l·∫°i')
              style: ElevatedButton.styleFrom(backgroundColor: tluBlue, foregroundColor: Colors.white, shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8))),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
        );
      },
    );
  }

  // (C√°c h√†m helper cho dialog XEM - Gi·ªØ nguy√™n)
  Widget _buildDetailContent(DivisionDetail detail) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildSectionTitle("Th√¥ng tin c∆° b·∫£n"),
          SizedBox(height: 16),
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Expanded(child: _buildReadOnlyField("M√£ b·ªô m√¥n:", detail.code)),
              SizedBox(width: 16),
              Expanded(child: _buildReadOnlyField("T√™n b·ªô m√¥n:", detail.name)),
            ],
          ),
          SizedBox(height: 16),
          _buildReadOnlyField("Khoa:", detail.departmentName),
          SizedBox(height: 16),
          _buildReadOnlyField("M√¥ t·∫£:", detail.description ?? 'Ch∆∞a c√≥ m√¥ t·∫£', isMultiLine: true),
          SizedBox(height: 16),
          Row(
            children: [
              Expanded(child: _buildReadOnlyField("S·ªë l∆∞·ª£ng gi·∫£ng vi√™n:", detail.teacherCount.toString())),
              SizedBox(width: 16),
              Expanded(child: _buildReadOnlyField("S·ªë l∆∞·ª£ng m√¥n h·ªçc:", detail.courseCount.toString())),
            ],
          ),

          Divider(height: 32),
          _buildSectionTitle("Danh s√°ch gi·∫£ng vi√™n (${detail.teachersList.length})"),
          _buildTeacherTable(detail.teachersList),

          Divider(height: 32),
          _buildSectionTitle("Danh s√°ch m√¥n h·ªçc (${detail.coursesList.length})"),
          _buildCourseTable(detail.coursesList),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(title, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: tluBlue));
  }

  Widget _buildReadOnlyField(String label, String value, {bool isMultiLine = false}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: TextStyle(fontWeight: FontWeight.w600, color: Colors.black54)),
        SizedBox(height: 4),
        Container(
          width: double.infinity,
          padding: EdgeInsets.symmetric(horizontal: 12, vertical: isMultiLine ? 12 : 10),
          constraints: BoxConstraints(minHeight: isMultiLine ? 80 : 40),
          decoration: BoxDecoration(
            color: Colors.grey[100],
            borderRadius: BorderRadius.circular(8.0),
            border: Border.all(color: Colors.grey.shade300),
          ),
          child: Text(value.isNotEmpty ? value : '(tr·ªëng)', style: TextStyle(color: value.isNotEmpty ? Colors.black87 : Colors.grey)),
        ),
      ],
    );
  }

  Widget _buildTeacherTable(List<User> teachers) {
    if (teachers.isEmpty) return Text('Kh√¥ng c√≥ gi·∫£ng vi√™n.');
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        headingRowColor: MaterialStateProperty.all(Colors.grey[200]),
        columns: const [
          DataColumn(label: Text('STT')),
          DataColumn(label: Text('M√£ gi·∫£ng vi√™n')),
          DataColumn(label: Text('H·ªç t√™n')),
          DataColumn(label: Text('Email')),
          DataColumn(label: Text('SƒêT')),
        ],
        rows: List.generate(teachers.length, (index) {
          final teacher = teachers[index];
          return DataRow(cells: [
            DataCell(Text((index + 1).toString())),
            DataCell(Text('GV${teacher.id.toString().padLeft(3,'0')}')),
            DataCell(Text(teacher.name)),
            DataCell(Text(teacher.email)),
            DataCell(Text(teacher.phoneNumber ?? 'N/A')), // (S·ª≠a l·ªói 'phoneNumber')
          ]);
        }),
      ),
    );
  }

  Widget _buildCourseTable(List<Course> courses) {
    if (courses.isEmpty) return Text('Kh√¥ng c√≥ m√¥n h·ªçc.');
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        headingRowColor: MaterialStateProperty.all(Colors.grey[200]),
        columns: const [
          DataColumn(label: Text('STT')),
          DataColumn(label: Text('M√£ MH')),
          DataColumn(label: Text('T√™n m√¥n h·ªçc')),
          DataColumn(label: Text('S·ªë t√≠n ch·ªâ')),
        ],
        rows: List.generate(courses.length, (index) {
          final course = courses[index];
          return DataRow(cells: [
            DataCell(Text((index + 1).toString())),
            DataCell(Text(course.code)),
            DataCell(Text(course.name)),
            DataCell(Text(course.credits.toString())),
          ]);
        }),
      ),
    );
  }


  /// ---------------------------------------------------
  /// DIALOG TH√äM / CH·ªàNH S·ª¨A B·ªò M√îN (Pop-up)
  /// (Gi·ªØ nguy√™n logic)
  /// ---------------------------------------------------
  void _showAddEditDivisionDialog(Division? division) {
    final bool isEdit = division != null;
    final _formKey = GlobalKey<FormState>();
    final _nameController = TextEditingController(text: isEdit ? division!.name : '');
    final _descController = TextEditingController();
    Department? _selectedDepartment;
    Future<void>? _detailsLoadingFuture;
    final _codeControllerForAdd = TextEditingController();

    if(isEdit) {
      _detailsLoadingFuture = _apiService.fetchDivisionDetails(division!.id).then((details) {
        if (mounted) {
          _descController.text = details.description ?? '';
          _selectedDepartment = _departments.firstWhereOrNull(
                  (d) => d.name == details.departmentName
          );
        }
      }).catchError((error) { /*...*/ });
    }
    if (isEdit && _departments.isNotEmpty) {
      _selectedDepartment = _departments.firstWhereOrNull(
              (d) => d.name == division!.departmentName
      );
    }

    bool _isSaving = false;

    Future<void> _saveDivision(VoidCallback onSavingStateChange) async {
      if (_formKey.currentState!.validate()) {
        onSavingStateChange();
        final data = {
          'name': _nameController.text,
          'department_id': _selectedDepartment?.id,
          'description': _descController.text,
          if (!isEdit) 'code': _codeControllerForAdd.text,
        };

        try {
          if (isEdit) {
            await _apiService.updateDivision(division!.id, data);
          } else {
            await _apiService.createDivision(data);
          }
          if (!mounted) return;
          _showSnackBar(isEdit ? 'C·∫≠p nh·∫≠t b·ªô m√¥n th√†nh c√¥ng!' : 'Th√™m b·ªô m√¥n th√†nh c√¥ng!', isError: false);
          Navigator.of(context).pop();
          _refreshDivisionList(clearSearch: !isEdit); // (S·ª≠a logic refresh)
        }catch (e) {
          if (!mounted) return;
          _showSnackBar('L·ªói: $e', isError: true);
          onSavingStateChange();
        }
      }
    }
    Future<bool> _showExitConfirmationDialog() async {
      final result = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
          title: Center(child: Text('Th√¥ng b√°o!', style: TextStyle(fontWeight: FontWeight.bold))),
          content: Text(
            isEdit ? 'B·∫°n c√≥ mu·ªën tho√°t kh·ªèi ch·ª©c nƒÉng s·ª≠a th√¥ng tin b·ªô m√¥n?' : 'B·∫°n c√≥ mu·ªën tho√°t kh·ªèi ch·ª©c nƒÉng th√™m th√¥ng tin b·ªô m√¥n m·ªõi?',
            textAlign: TextAlign.center,
          ),
          actionsAlignment: MainAxisAlignment.center,
          actions: <Widget>[
            OutlinedButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: Text('H·ªßy'),
              style: OutlinedButton.styleFrom(
                foregroundColor: cancelColor, side: BorderSide(color: cancelColor),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
            SizedBox(width: 10),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: Text('X√°c nh·∫≠n'),
              style: ElevatedButton.styleFrom(
                backgroundColor: confirmColor, foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
          ],
        ),
      );
      return result ?? false;
    }

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return StatefulBuilder(
            builder: (context, setDialogState) {
              Widget formContent = FutureBuilder(
                  future: _detailsLoadingFuture,
                  builder: (context, snapshot) {
                    if (isEdit && snapshot.connectionState == ConnectionState.waiting) {
                      return Center(child: Padding(padding: const EdgeInsets.all(20.0), child: CircularProgressIndicator(strokeWidth: 2)));
                    }
                    if (isEdit && snapshot.connectionState == ConnectionState.done && _selectedDepartment == null && division != null){
                      _selectedDepartment = _departments.firstWhereOrNull(
                              (d) => d.name == division.departmentName
                      );
                    }

                    return Form(
                      key: _formKey,
                      child: SingleChildScrollView(
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: <Widget>[
                            if (!isEdit) ...[
                              Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Expanded(child: _buildFormField(_codeControllerForAdd, 'M√£ b·ªô m√¥n: *', 'Nh·∫≠p m√£ b·ªô m√¥n')),
                                  SizedBox(width: 16),
                                  Expanded(child: _buildFormField(_nameController, 'T√™n b·ªô m√¥n: *', 'Nh·∫≠p t√™n b·ªô m√¥n')),
                                ],
                              ),
                              SizedBox(height: 16),
                              _buildDepartmentDropdown( (newValue) { setDialogState(() => _selectedDepartment = newValue); }, _selectedDepartment),

                            ] else ... [
                              Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Expanded(child: _buildFormField(_nameController, 'T√™n b·ªô m√¥n: *', 'Nh·∫≠p t√™n b·ªô m√¥n')),
                                  SizedBox(width: 16),
                                  Expanded(child: _buildDepartmentDropdown( (newValue) { setDialogState(() => _selectedDepartment = newValue); }, _selectedDepartment)),
                                ],
                              ),
                            ],
                            SizedBox(height: 16),
                            Text('M√¥ t·∫£:', style: TextStyle(fontWeight: FontWeight.w600)),
                            SizedBox(height: 4),
                            TextFormField(
                              controller: _descController,
                              decoration: InputDecoration(
                                hintText: 'Nh·∫≠p m√¥ t·∫£',
                                border: OutlineInputBorder(),
                                contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                              ),
                              maxLines: 4,
                              minLines: 3,
                            ),
                          ],
                        ),
                      ),
                    );
                  }
              );
              return WillPopScope(
                onWillPop: _showExitConfirmationDialog,
                child: AlertDialog(
                  titlePadding: const EdgeInsets.all(0),
                  title: _buildDialogHeader(isEdit ? 'Ch·ªânh S·ª≠a Th√¥ng Tin B·ªô M√¥n' : 'Th√™m B·ªô M√¥n M·ªõi'),
                  contentPadding: const EdgeInsets.fromLTRB(24.0, 20.0, 24.0, 0),
                  content: ConstrainedBox(
                    constraints: BoxConstraints(maxWidth: 500),
                    child: formContent,
                  ),
                  actionsPadding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
                  actions: <Widget>[
                    OutlinedButton(
                      onPressed: _isSaving ? null : () async {
                        if (await _showExitConfirmationDialog()) {
                          Navigator.of(context).pop();
                        }
                      },
                      child: Text('H·ªßy'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: cancelColor, side: BorderSide(color: cancelColor),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      ),
                    ),
                    SizedBox(width: 10),
                    ElevatedButton(
                      onPressed: _isSaving ? null : () => _saveDivision(() => setDialogState(() => _isSaving = !_isSaving)),
                      child: Text(isEdit ? 'L∆∞u' : 'X√°c nh·∫≠n'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: confirmColor, foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      ),
                    ),
                  ],
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
                ),
              );
            }
        );
      },
    );
  }

  // (H√†m helper build Header cho Dialog)
  Widget _buildDialogHeader(String title) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
      color: tluBlue,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(title, style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
          IconButton(
            icon: Icon(Icons.close, color: Colors.white),
            onPressed: () => Navigator.of(context).pop(),
            padding: EdgeInsets.zero,
            constraints: BoxConstraints(),
          )
        ],
      ),
    );
  }

  // (H√†m helper build Form Field)
  Widget _buildFormField(TextEditingController controller, String label, String hint, {bool isReadOnly = false}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: TextStyle(fontWeight: FontWeight.w600)),
        SizedBox(height: 4),
        TextFormField(
          controller: controller,
          readOnly: isReadOnly,
          decoration: InputDecoration(
            hintText: hint,
            border: OutlineInputBorder(),
            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
            filled: isReadOnly,
            fillColor: isReadOnly ? Colors.grey[100] : null,
          ),
          validator: (value) {
            if (!isReadOnly && (value == null || value.isEmpty)) {
              return 'Vui l√≤ng nh·∫≠p th√¥ng tin';
            }
            return null;
          },
        ),
      ],
    );
  }

  // (H√†m helper build Dropdown Khoa)
  Widget _buildDepartmentDropdown(ValueChanged<Department?> onChanged, Department? currentValue) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Khoa: *', style: TextStyle(fontWeight: FontWeight.w600)),
        SizedBox(height: 4),
        DropdownButtonFormField<Department>(
          value: currentValue,
          hint: Text('-- Ch·ªçn Khoa qu·∫£n l√Ω --'),
          isExpanded: true,
          decoration: InputDecoration(
            border: OutlineInputBorder(),
            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
          ),
          items: _departments.map((Department department) {
            return DropdownMenuItem<Department>(
              value: department,
              child: Text(department.name),
            );
          }).toList(),
          onChanged: _isLoadingDepartments ? null : onChanged,
          validator: (value) => value == null ? 'Vui l√≤ng ch·ªçn khoa' : null,
        ),
      ],
    );
  }

  /// ---------------------------------------------------
  /// DIALOG X√ìA B·ªò M√îN (Pop-up)
  /// ---------------------------------------------------
  void _showDeleteConfirmationDialog(Division division) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        bool _isDeleting = false;
        return StatefulBuilder(
            builder: (context, setDialogState) {
              return AlertDialog(
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
                title: Center(child: Text('Th√¥ng b√°o!', style: TextStyle(fontWeight: FontWeight.bold))),
                content: Text('B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a b·ªô m√¥n "${division.name}"?', textAlign: TextAlign.center),
                actionsAlignment: MainAxisAlignment.center,
                actions: <Widget>[
                  OutlinedButton(
                    onPressed: _isDeleting ? null : () => Navigator.of(context).pop(),
                    child: Text('H·ªßy'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: cancelColor, side: BorderSide(color: cancelColor),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                      padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    ),
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    onPressed: _isDeleting ? null : () async {
                      setDialogState(() { _isDeleting = true; });
                      try {
                        await _apiService.deleteDivision(division.id);
                        if (!mounted) return;
                        _showSnackBar('X√≥a b·ªô m√¥n th√†nh c√¥ng!', isError: false);
                        Navigator.of(context).pop();
                        _refreshDivisionList(clearSearch: true); // (S·ª≠a logic refresh)
                      } catch (e) {
                        if (!mounted) return;
                        _showSnackBar('L·ªói khi x√≥a: $e', isError: true);
                        Navigator.of(context).pop();
                      }
                    },
                    child: Text('X√°c nh·∫≠n'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: confirmColor, foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                      padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    ),
                  ),
                ],
              );
            }
        );
      },
    );
  }

  // (H√†m helper SnackBar)
  void _showSnackBar(String message, {bool isError = false}) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? Colors.red : Colors.green,
      ),
    );
  }

} // End of _DivisionScreenState