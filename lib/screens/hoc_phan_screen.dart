import 'package:flutter/material.dart';
import 'dart:convert';
import 'dart:math';
import '../api_service.dart';
import '../models/course.dart';

// üëá TH√äM C√ÅC IMPORT N√ÄY CHO DIALOGS
import '../models/course_detail.dart';
import '../models/department.dart';
// üëÜ K·∫æT TH√öC TH√äM IMPORT

// H·∫±ng s·ªë m√†u
final Color tluBlue = const Color(0xFF005A9C);
final Color iconView = Colors.blue;
final Color iconEdit = Colors.green;
final Color iconDelete = Colors.red;

class HocPhanScreen extends StatefulWidget {
  const HocPhanScreen({Key? key}) : super(key: key);

  @override
  _HocPhanScreenState createState() => _HocPhanScreenState();
}

class _HocPhanScreenState extends State<HocPhanScreen> {
  // State cho API v√† D·ªØ li·ªáu
  final ApiService _apiService = ApiService();
  late Future<List<Course>> _coursesFuture;
  List<Course> _allCourses = [];
  List<Course> _filteredCourses = [];

  // State cho T√¨m ki·∫øm v√† Ph√¢n trang
  final TextEditingController _searchController = TextEditingController();
  int _currentPage = 1; // B·∫Øt ƒë·∫ßu t·ª´ trang 1
  int _lastPage = 1;    // L∆∞u tr·ªØ t·ªïng s·ªë trang
  int _totalItems = 0;  // L∆∞u tr·ªØ t·ªïng s·ªë m·ª•c
  final int _rowsPerPage = 10; // S·ªë h√†ng m·ªói trang

  @override
  void initState() {
    super.initState();
    _refreshData(); // T·∫£i d·ªØ li·ªáu l·∫ßn ƒë·∫ßu
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  // === LOGIC T·∫¢I V√Ä L·ªåC D·ªÆ LI·ªÜU ===

  /// T·∫£i l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ API (ƒê√É S·ª¨A: Tr·∫£ v·ªÅ Future<void> v√† d√πng await)
  Future<void> _refreshData() async {
    _coursesFuture = _apiService.fetchCourses(); // G·ªçi API

    // TH√äM: D√πng await ƒë·ªÉ ch·ªù Future ho√†n th√†nh tr∆∞·ªõc khi ti·∫øp t·ª•c
    await _coursesFuture.then((data) {
      if (mounted) {
        setState(() {
          _allCourses = data;
          _filterData(_searchController.text, resetPage: true); // L·ªçc theo query hi·ªán t·∫°i
        });
      }
    }).catchError((e) {
      if (mounted) { // Ki·ªÉm tra xem widget c√≤n t·ªìn t·∫°i
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('L·ªói t·∫£i d·ªØ li·ªáu: $e'), backgroundColor: Colors.red),
        );
      }
    });
  }

  /// L·ªçc danh s√°ch h·ªçc ph·∫ßn d·ª±a tr√™n thanh t√¨m ki·∫øm
  void _filterData(String query, {bool resetPage = false}) {
    List<Course> tempFilteredList;
    if (query.isEmpty) {
      tempFilteredList = List.from(_allCourses);
    } else {
      final lowerQuery = query.toLowerCase();
      tempFilteredList = _allCourses
          .where((course) =>
      course.name.toLowerCase().contains(lowerQuery) ||
          course.code.toLowerCase().contains(lowerQuery) ||
          course.departmentName.toLowerCase().contains(lowerQuery))
          .toList();
    }
    // C·∫¨P NH·∫¨T: G·ªçi h√†m ph√¢n trang sau khi l·ªçc
    _updatePagination(tempFilteredList, goToFirstPage: resetPage);
  }

  // TH√äM: H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√¢n trang
  void _updatePagination(List<Course> list, {bool goToFirstPage = false}) {
    if (!mounted) return;
    setState(() {
      _totalItems = list.length;
      _lastPage = (_totalItems / _rowsPerPage).ceil();
      if (_lastPage == 0) _lastPage = 1;

      if (goToFirstPage) {
        _currentPage = 1;
      } else {
        if (_currentPage > _lastPage) _currentPage = _lastPage;
      }

      // ƒê·∫£m b·∫£o startIndex kh√¥ng √¢m
      int startIndex = (_currentPage - 1) * _rowsPerPage;
      int endIndex = min(startIndex + _rowsPerPage, _totalItems);

      // L·∫•y danh s√°ch cho trang hi·ªán t·∫°i
      _filteredCourses = (startIndex < _totalItems)
          ? list.sublist(startIndex, endIndex)
          : [];
    });
  }

  /// L·∫•y danh s√°ch con cho trang hi·ªán t·∫°i
  List<Course> _getDataForCurrentPage() {
    return _filteredCourses;
  }

  // TH√äM: H√†m chuy·ªÉn trang
  void _goToPage(int page) {
    if (page < 1 || page > _lastPage || page == _currentPage) return;
    if (mounted) {
      setState(() {
        _currentPage = page;
        // K√≠ch ho·∫°t l·∫°i b·ªô l·ªçc/ph√¢n trang ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
        _filterData(_searchController.text, resetPage: false);
      });
    }
  }

  // === PH·∫¶N BUILD UI ===

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<Course>>(
      future: _coursesFuture,
      builder: (context, snapshot) {
        // Ch·ªâ hi·ªÉn th·ªã loading khi ch∆∞a c√≥ d·ªØ li·ªáu
        if (snapshot.connectionState == ConnectionState.waiting &&
            _allCourses.isEmpty) {
          return Center(child: CircularProgressIndicator());
        }
        // Hi·ªÉn th·ªã l·ªói ch·ªâ khi kh√¥ng t·∫£i ƒë∆∞·ª£c l·∫ßn ƒë·∫ßu
        if (snapshot.hasError && _allCourses.isEmpty) {
          return Center(
            child: Text(
              'L·ªói khi t·∫£i d·ªØ li·ªáu: ${snapshot.error}',
              style: TextStyle(color: Colors.red),
            ),
          );
        }
        // Lu√¥n build UI, k·ªÉ c·∫£ khi ƒëang refresh
        return _buildContent(context);
      },
    );
  }

  /// Widget ch·ª©a n·ªôi dung (Ti√™u ƒë·ªÅ, N√∫t, B·∫£ng, Ph√¢n trang)
  Widget _buildContent(BuildContext context) {
    final paginatedData = _getDataForCurrentPage();

    return SingleChildScrollView(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 1. N√∫t Th√™m v√† T√¨m ki·∫øm
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              // N√∫t "Th√™m h·ªçc ph·∫ßn"
              ElevatedButton.icon(
                onPressed: () => _showAddEditDialog(context), // G·ªåI DIALOG TH√äM
                icon: Icon(Icons.add, color: Colors.white, size: 20),
                label: Text("Th√™m h·ªçc ph·∫ßn",
                    style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontWeight: FontWeight.w600)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: tluBlue,
                  padding:
                  const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0),
                  ),
                ),
              ),

              // Thanh "T√¨m ki·∫øm"
              Container(
                width: 300,
                child: TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: "T√¨m ki·∫øm theo M√£,T√™n h·ªçc ph·∫ßn",
                    prefixIcon: Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    filled: true,
                    fillColor: Colors.white,
                    contentPadding: const EdgeInsets.symmetric(vertical: 12.0),
                  ),
                  onChanged: (query) => _filterData(query, resetPage: true), // S·ª¨A: Reset trang khi t√¨m ki·∫øm
                ),
              ),
            ],
          ),
          const SizedBox(height: 24),

          // 2. B·∫£ng D·ªØ li·ªáu & Ph√¢n trang
          // S·ª¨A: G·ªôp DataTable v√† Pagination Controls v√†o c√πng m·ªôt Container
          Container(
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8.0),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: Column(
              children: [
                LayoutBuilder(builder: (context, constraints) {
                  return SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: ConstrainedBox(
                      constraints: BoxConstraints(minWidth: constraints.maxWidth),
                      child: DataTable(
                        headingRowColor: MaterialStateProperty.all(tluBlue),
                        headingTextStyle: TextStyle(
                            color: Colors.white, fontWeight: FontWeight.bold),
                        columns: const [
                          DataColumn(label: Text('STT')),
                          DataColumn(label: Text('M√£ h·ªçc ph·∫ßn')),
                          DataColumn(label: Text('T√™n h·ªçc ph·∫ßn')),
                          DataColumn(label: Text('S·ªë t√≠n ch·ªâ')),
                          DataColumn(label: Text('Khoa ph·ª• tr√°ch')),
                          DataColumn(label: Text('Lo·∫°i h·ªçc ph·∫ßn')),
                          DataColumn(label: Text('Thao t√°c')),
                        ],
                        // D√πng d·ªØ li·ªáu ƒë√£ ph√¢n trang
                        rows: List.generate(
                          paginatedData.length,
                              (index) {
                            final course = paginatedData[index];
                            final stt = (_currentPage - 1) * _rowsPerPage + index + 1; // T√çNH L·∫†I STT
                            return _buildDataRow(stt, course);
                          },
                        ),
                      ),
                    ),
                  );
                }),
                // 3. Ph√¢n trang
                if (_totalItems > 0)
                  _buildPaginationControls(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // TH√äM: Widget ƒëi·ªÅu khi·ªÉn ph√¢n trang chi ti·∫øt
  Widget _buildPaginationControls() {
    return Container(
      // Padding ch·ªâ n·∫±m b√™n trong container
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      decoration: BoxDecoration(
        color: Colors.white,
        // Ch·ªâ v·∫Ω ƒë∆∞·ªùng vi·ªÅn tr√™n ƒë·ªÉ ph√¢n t√°ch v·ªõi b·∫£ng d·ªØ li·ªáu
        border: Border(top: BorderSide(color: Colors.grey.shade300, width: 1.0)),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // S·ª¨A: Hi·ªÉn th·ªã th√¥ng tin ph√¢n trang gi·ªëng m·∫´u
          Text('Trang $_currentPage / $_lastPage (T·ªïng: $_totalItems)'),
          Row(
            children: [
              // N√∫t trang ƒë·∫ßu
              IconButton(
                icon: const Icon(Icons.skip_previous, size: 20),
                onPressed: _currentPage > 1 ? () => _goToPage(1) : null,
                tooltip: 'Trang ƒë·∫ßu',
              ),
              // N√∫t trang tr∆∞·ªõc
              IconButton(
                icon: const Icon(Icons.chevron_left, size: 20),
                onPressed: _currentPage > 1 ? () => _goToPage(_currentPage - 1) : null,
                tooltip: 'Trang tr∆∞·ªõc',
              ),
              const SizedBox(width: 8),
              // N√∫t trang sau
              IconButton(
                icon: const Icon(Icons.chevron_right, size: 20),
                onPressed: _currentPage < _lastPage ? () => _goToPage(_currentPage + 1) : null,
                tooltip: 'Trang sau',
              ),
              // N√∫t trang cu·ªëi
              IconButton(
                icon: const Icon(Icons.skip_next, size: 20),
                onPressed: _currentPage < _lastPage ? () => _goToPage(_lastPage) : null,
                tooltip: 'Trang cu·ªëi',
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// Helper ƒë·ªÉ t·∫°o m·ªôt h√†ng d·ªØ li·ªáu (DataRow)
  DataRow _buildDataRow(int stt, Course course) {
    return DataRow(
      cells: [
        DataCell(Text(stt.toString())),
        DataCell(Text(course.code)),
        DataCell(Text(course.name)),
        DataCell(Text("${course.credits.toString()} T√≠n ch·ªâ")),
        DataCell(Text(course.departmentName)),
        DataCell(Text(course.type)),
        DataCell(
          Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: Icon(Icons.info_outline, color: iconView),
                onPressed: () => _showViewDialog(context, course.id),
                tooltip: "Xem",
              ),
              IconButton(
                icon: Icon(Icons.edit_outlined, color: iconEdit),
                onPressed: () => _showAddEditDialog(context, courseId: course.id),
                tooltip: "S·ª≠a",
              ),
              IconButton(
                // S·ª¨A: Th√™m logic loading v√†o n√∫t x√≥a
                icon: Icon(Icons.delete_outline, color: iconDelete),
                onPressed: () => _showDeleteDialog(context, course),
                tooltip: "X√≥a",
              ),
            ],
          ),
        ),
      ],
    );
  }

  // === C√ÅC H√ÄM G·ªåI DIALOG ===

  /// M·ªü pop-up XEM chi ti·∫øt
  void _showViewDialog(BuildContext context, int courseId) {
    showDialog(
      context: context,
      builder: (BuildContext dialogContext) {
        // Tr·∫£ v·ªÅ widget ViewCourseDialog (ƒë·ªãnh nghƒ©a ·ªü d∆∞·ªõi)
        return ViewCourseDialog(courseId: courseId);
      },
    );
  }

  /// M·ªü pop-up TH√äM (n·∫øu courseId=null) ho·∫∑c S·ª¨A (n·∫øu courseId c√≥)
  void _showAddEditDialog(BuildContext context, {int? courseId}) {
    showDialog(
      context: context,
      builder: (BuildContext dialogContext) {
        // TRUY·ªÄN H√ÄM _refreshData V√ÄO AddEditCourseDialog
        return AddEditCourseDialog(
          courseId: courseId,
          onRefresh: _refreshData, // <--- ƒê√É S·ª¨A
        );
      },
    ).then((result) {
      // Sau khi dialog ƒë√≥ng, n·∫øu n√≥ tr·∫£ v·ªÅ 'true' (nghƒ©a l√† ƒë√£ l∆∞u th√†nh c√¥ng)
      if (result == true) {
        // SnackBar th√¥ng b√°o th√†nh c√¥ng (Ch·ªâ ch·∫°y sau khi refreshData ƒë√£ ho√†n th√†nh)
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(courseId == null ? 'Th√™m h·ªçc ph·∫ßn th√†nh c√¥ng!' : 'C·∫≠p nh·∫≠t h·ªçc ph·∫ßn th√†nh c√¥ng!'),
            backgroundColor: Colors.green,
          ),
        );
        // B·ªé _refreshData() ·ªü ƒë√¢y v√¨ n√≥ ƒë√£ ƒë∆∞·ª£c g·ªçi b√™n trong dialog
      }
    });
  }

  /// M·ªü pop-up X√ìA
  void _showDeleteDialog(BuildContext context, Course course) {
    // G·ªçi h√†m showDeleteConfirmationDialog (ƒë·ªãnh nghƒ©a ·ªü d∆∞·ªõi)
    showDeleteConfirmationDialog(
      context,
      title: 'Th√¥ng b√°o!',
      content: 'B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ªçc ph·∫ßn "${course.name}"?',
      // TRUY·ªÄN H√ÄM API V√Ä H√ÄM REFRESH V√ÄO ƒê√ÇY
      onConfirmDelete: () => _apiService.deleteCourse(course.id).then((_) => _refreshData()), // <--- ƒê√É S·ª¨A
    ).then((deleted) {
      // N·∫øu ng∆∞·ªùi d√πng nh·∫•n "X√°c nh·∫≠n" v√† qu√° tr√¨nh x√≥a th√†nh c√¥ng (deleted = true)
      if (deleted == true) {
        // SnackBar th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('ƒê√£ x√≥a h·ªçc ph·∫ßn "${course.name}" th√†nh c√¥ng!'),
              backgroundColor: Colors.green),
        );
        // Kh√¥ng c·∫ßn _refreshData() ·ªü ƒë√¢y n·ªØa
      } else if (deleted is Exception) {
        // B·∫Øt l·ªói n·∫øu qu√° tr√¨nh x√≥a th·∫•t b·∫°i
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('L·ªói khi x√≥a: $deleted'), backgroundColor: Colors.red),
        );
      }
    });
  }
} // === K·∫æT TH√öC CLASS _HocPhanScreenState ===

// =======================================================================
//
//               B·∫ÆT ƒê·∫¶U CODE C√ÅC DIALOG (POP-UP)
//
// =======================================================================

// ==========================================================
// 1. POPUP XEM CHI TI·∫æT (ƒê√É CƒÇN CH·ªàNH V√Ä S·ª¨A M√î T·∫¢)
// ==========================================================
class ViewCourseDialog extends StatefulWidget {
  final int courseId;
  const ViewCourseDialog({Key? key, required this.courseId}) : super(key: key);

  @override
  _ViewCourseDialogState createState() => _ViewCourseDialogState();
}

class _ViewCourseDialogState extends State<ViewCourseDialog> {
  late Future<CourseDetail> _detailsFuture;
  final ApiService _apiService = ApiService();

  @override
  void initState() {
    super.initState();
    _detailsFuture = _apiService.fetchCourseDetails(widget.courseId);
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
      child: Container(
        width: 800, // C√¢n b·∫±ng v·ªõi form s·ª≠a
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: tluBlue,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(8.0),
                  topRight: Radius.circular(8.0),
                ),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'TH√îNG TIN H·ªåC PH·∫¶N',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.white),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              ),
            ),
            // Body
            FutureBuilder<CourseDetail>(
              future: _detailsFuture,
              builder: (context, snapshot) {
                // ƒêang t·∫£i
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const SizedBox(
                    height: 400,
                    child: Center(child: CircularProgressIndicator()),
                  );
                }
                // L·ªói
                if (snapshot.hasError) {
                  return SizedBox(
                    height: 400,
                    child: Center(
                        child: Text(
                            'L·ªói t·∫£i chi ti·∫øt: ${snapshot.error}\n\nVui l√≤ng ki·ªÉm tra API: GET /api/courses/${widget.courseId}')), // Th√™m g·ª£i √Ω ki·ªÉm tra API
                  );
                }
                // Th√†nh c√¥ng
                final course = snapshot.data!;
                return SingleChildScrollView(
                  padding: const EdgeInsets.all(24.0),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // Form 2x3 C·ªôt
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Expanded(
                            child: Column(
                              children: [
                                _buildReadOnlyFormField('M√£ h·ªçc ph·∫ßn', course.code),
                                const SizedBox(height: 16),
                                _buildReadOnlyFormField('S·ªë t√≠n ch·ªâ', course.credits.toString()),
                                const SizedBox(height: 16),
                                _buildReadOnlyFormField('Khoa ph·ª• tr√°ch', course.departmentName),
                              ],
                            ),
                          ),
                          const SizedBox(width: 24),
                          Expanded(
                            child: Column(
                              children: [
                                _buildReadOnlyFormField('T√™n h·ªçc ph·∫ßn', course.name),
                                const SizedBox(height: 16),
                                _buildReadOnlyFormField('Lo·∫°i h·ªçc ph·∫ßn', course.subjectType),
                                // X√ìA: B·ªè tr∆∞·ªùng B·ªô m√¥n ph·ª• tr√°ch v√† d√πng placeholder
                                const SizedBox(height: 16), // ƒê·ªÉ c√¢n b·∫±ng l∆∞·ªõi 3x3
                                _buildEmptyPlaceholder(label: 'B·ªô m√¥n ph·ª• tr√°ch', hint: 'Tr∆∞·ªùng ƒë√£ b·ªã x√≥a'),
                              ],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      // M√¥ t·∫£
                      _buildReadOnlyFormField('M√¥ t·∫£', course.description, isMultiLine: true),

                      const SizedBox(height: 24),
                      const Divider(),
                      const SizedBox(height: 16),
                      // Footer
                      Align(
                        alignment: Alignment.centerRight,
                        child: ElevatedButton(
                          onPressed: () => Navigator.of(context).pop(),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: tluBlue,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 24, vertical: 16),
                          ),
                          child: const Text('Quay l·∫°i',
                              style: TextStyle(color: Colors.white)),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  // S·ª¨A: H√†m build Read Only Field (gi·ªëng form Add/Edit), c√≥ x·ª≠ l√Ω tr∆∞·ªùng r·ªóng
  Widget _buildReadOnlyFormField(String label, String value, {bool isMultiLine = false}) {
    final displayValue = (value.isEmpty || value == 'N/A') ? 'Kh√¥ng c√≥ m√¥ t·∫£' : value;
    final isNoData = (value.isEmpty || value == 'N/A');

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('$label:', style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 14)),
        const SizedBox(height: 8),
        TextFormField(
          initialValue: isNoData ? '' : displayValue,
          readOnly: true,
          maxLines: isMultiLine ? 4 : 1,
          minLines: isMultiLine ? 3 : 1,
          style: TextStyle(color: isNoData ? Colors.grey.shade600 : Colors.black),
          decoration: InputDecoration(
            hintText: isNoData ? displayValue : null, // Hi·ªÉn th·ªã "Kh√¥ng c√≥ m√¥ t·∫£" d∆∞·ªõi d·∫°ng hint
            hintStyle: TextStyle(color: Colors.grey.shade600),
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),
            filled: true,
            fillColor: Colors.grey[100], // N·ªÅn x√°m
            // S·ª¨A L·ªñI: Th√™m borderSide
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8.0),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8.0),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
          ),
        ),
      ],
    );
  }

  // TH√äM: Helper m·ªõi ƒë·ªÉ t·∫°o m·ªôt √¥ placeholder r·ªóng (d√πng ƒë·ªÉ c√¢n b·∫±ng grid)
  Widget _buildEmptyPlaceholder({required String label, required String hint}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('$label:', style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 14)),
        const SizedBox(height: 8),
        TextFormField(
          initialValue: '',
          readOnly: true,
          maxLines: 1,
          minLines: 1,
          style: TextStyle(color: Colors.grey.shade600),
          decoration: InputDecoration(
            hintText: hint,
            hintStyle: TextStyle(color: Colors.grey.shade600),
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),
            filled: true,
            fillColor: Colors.grey[100],
            // S·ª¨A L·ªñI: Th√™m borderSide
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8.0),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8.0),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
          ),
        ),
      ],
    );
  }
}

// ==========================================================
// 2. POPUP TH√äM / S·ª¨A H·ªåC PH·∫¶N (ƒê√É X√ìA TR∆Ø·ªúNG B·ªò M√îN)
// ==========================================================
class AddEditCourseDialog extends StatefulWidget {
  final int? courseId; // N·∫øu null l√† Th√™m, n·∫øu c√≥ l√† S·ª≠a
  // TH√äM: Callback ƒë·ªÉ g·ªçi refresh t·ª´ HocPhanScreen
  final Future<void> Function() onRefresh;

  // S·ª¨A: Th√™m required this.onRefresh
  const AddEditCourseDialog({Key? key, this.courseId, required this.onRefresh}) : super(key: key);

  @override
  _AddEditCourseDialogState createState() => _AddEditCourseDialogState();
}

class _AddEditCourseDialogState extends State<AddEditCourseDialog> {
  final ApiService _apiService = ApiService();
  final _formKey = GlobalKey<FormState>();

  // Controllers
  final _codeController = TextEditingController();
  final _nameController = TextEditingController();
  final _creditsController = TextEditingController();
  final _descriptionController = TextEditingController();

  // State cho Dropdown
  late Future<Map<String, dynamic>> _loadingFuture;
  final List<String> _courseTypes = ['B·∫Øt bu·ªôc', 'T√πy ch·ªçn'];

  // State
  int? _selectedDepartmentId;
  String? _selectedType;

  // Bi·∫øn ƒë·ªÉ l∆∞u l·ªói tr·∫£ v·ªÅ t·ª´ API (v√≠ d·ª•: l·ªói tr√πng m√£)
  String? _codeApiError;

  // Tr·∫°ng th√°i
  bool get _isEditMode => widget.courseId != null;
  bool _isSaving = false; // Tr·∫°ng th√°i ƒëang l∆∞u

  @override
  void initState() {
    super.initState();
    // G·ªåI H√ÄM T·∫¢I G·ªòP T·∫§T C·∫¢ D·ªÆ LI·ªÜU BAN ƒê·∫¶U
    _loadingFuture = _loadInitialData();
  }

  // TH√äM: H√†m t·∫£i g·ªôp t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt
  Future<Map<String, dynamic>> _loadInitialData() async {
    // Lu√¥n t·∫£i danh s√°ch Khoa
    final departmentsFuture = _apiService.fetchDepartments().catchError((e) {
      // X·ª≠ l√Ω l·ªói t·∫£i khoa, tr·∫£ v·ªÅ r·ªóng ƒë·ªÉ form v·∫´n hi·ªÉn th·ªã nh∆∞ng kh√¥ng ch·ªçn ƒë∆∞·ª£c
      print('L·ªói t·∫£i Departments: $e');
      return <Department>[];
    });

    final results = <String, dynamic>{};

    // T·∫£i danh s√°ch Khoa
    results['departments'] = await departmentsFuture;

    // N·∫øu l√† S·ª≠a, t·∫£i chi ti·∫øt kh√≥a h·ªçc
    if (_isEditMode) {
      try {
        final course = await _apiService.fetchCourseDetails(widget.courseId!);
        results['course'] = course;

        // C·∫≠p nh·∫≠t gi√° tr·ªã ban ƒë·∫ßu cho controllers v√† state
        if (mounted) {
          _codeController.text = course.code;
          _nameController.text = course.name;
          _creditsController.text = course.credits.toString();
          _descriptionController.text = course.description;
          // Set state ƒë·ªÉ Dropdown hi·ªÉn th·ªã gi√° tr·ªã ban ƒë·∫ßu sau khi FutureBuilder ho√†n t·∫•t
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if(mounted) {
              setState(() {
                _selectedDepartmentId = course.departmentId;
                _selectedType = course.subjectType;
              });
            }
          });
        }
      } catch (e) {
        // L·ªói t·∫£i chi ti·∫øt kh√≥a h·ªçc
        // N√©m l·ªói ƒë·ªÉ FutureBuilder chuy·ªÉn sang tr·∫°ng th√°i snapshot.hasError
        throw Exception('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt h·ªçc ph·∫ßn: $e');
      }
    }

    return results;
  }


  @override
  void dispose() {
    _codeController.dispose();
    _nameController.dispose();
    _creditsController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  // H√†m x·ª≠ l√Ω khi nh·∫•n L∆∞u/X√°c nh·∫≠n
  Future<void> _submitForm() async {
    // 1. Ki·ªÉm tra l·ªói Frontend (Flutter validation)
    if (_formKey.currentState!.validate()) {
      // B·∫ÆT ƒê·∫¶U: Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang l∆∞u
      setState(() {
        _isSaving = true;
        _codeApiError = null; // X√≥a l·ªói API c≈©
      });

      // T·∫°o map d·ªØ li·ªáu (ƒê√£ x√≥a division_id)
      final data = {
        'code': _codeController.text,
        'name': _nameController.text,
        'credits': int.tryParse(_creditsController.text) ?? 0,
        // ƒê·∫£m b·∫£o kh√¥ng g·ª≠i null n·∫øu ch∆∞a ch·ªçn (Backend n√™n x·ª≠ l√Ω)
        'department_id': _selectedDepartmentId,
        'subject_type': _selectedType,
        'description': _descriptionController.text,
      };

      try {
        if (_isEditMode) {
          await _apiService.updateCourse(widget.courseId!, data);
        } else {
          await _apiService.createCourse(data);
        }

        // --- THAO T√ÅC QUAN TR·ªåNG ƒê√É S·ª¨A ---
        // 1. CH·ªú: Ch·ªù vi·ªác t·∫£i l·∫°i d·ªØ li·ªáu ho√†n t·∫•t
        await widget.onRefresh();

        // 2. TH√ÄNH C√îNG: ƒê√≥ng dialog v√† tr·∫£ v·ªÅ 'true'
        if (mounted) Navigator.of(context).pop(true);
        // ------------------------------------

      } catch (e) {
        // TH·∫§T B·∫†I: D·ª´ng tr·∫°ng th√°i ƒëang l∆∞u
        setState(() => _isSaving = false);

        // 2. B·∫Øt l·ªói tr√πng m√£ (API 422 Unprocessable Entity)
        if (e.toString().contains('code') && e.toString().contains('422')) {
          setState(() {
            _codeApiError = 'M√£ h·ªçc ph·∫ßn n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p m√£ kh√°c.';
          });
        } else if (mounted) {
          // L·ªói kh√°c (500, m·∫°ng,...)
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text('L·ªói khi l∆∞u: $e'), backgroundColor: Colors.red),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
      child: Container(
        width: 800, // Form r·ªông h∆°n
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: tluBlue,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(8.0),
                  topRight: Radius.circular(8.0),
                ),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    _isEditMode
                        ? 'CH·ªàNH S·ª¨A TH√îNG TIN H·ªåC PH·∫¶N'
                        : 'TH√äM H·ªåC PH·∫¶N M·ªöI',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.white),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              ),
            ),
            // Body: S·ª≠ d·ª•ng FutureBuilder ƒë·ªÉ ki·ªÉm so√°t Loading to√†n m√†n h√¨nh
            FutureBuilder<Map<String, dynamic>>(
              future: _loadingFuture,
              builder: (context, snapshot) {
                // 1. LOADING STATE: Hi·ªÉn th·ªã indicator to√†n m√†n h√¨nh
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const SizedBox(
                    height: 500, // Chi·ªÅu cao c·ªë ƒë·ªãnh cho m√†n h√¨nh t·∫£i
                    child: Center(child: CircularProgressIndicator()),
                  );
                }

                // 2. ERROR STATE: N·∫øu c√≥ l·ªói nghi√™m tr·ªçng (v√≠ d·ª•: l·ªói t·∫£i chi ti·∫øt khi S·ª≠a)
                if (snapshot.hasError) {
                  // ƒê√≥ng dialog v√† hi·ªÉn th·ªã SnackBar l·ªói
                  WidgetsBinding.instance.addPostFrameCallback((_) {
                    Navigator.of(context).pop();
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('L·ªói t·∫£i d·ªØ li·ªáu: ${snapshot.error}'),
                        backgroundColor: Colors.red,
                      ),
                    );
                  });
                  // Tr·∫£ v·ªÅ widget r·ªóng t·∫°m th·ªùi
                  return const SizedBox(height: 1);
                }

                // L·∫•y danh s√°ch Khoa t·ª´ snapshot
                final departments = snapshot.data!['departments'] as List<Department>;

                // 3. SUCCESS STATE: Hi·ªÉn th·ªã Form sau khi t·∫£i xong
                return SingleChildScrollView(
                  padding: const EdgeInsets.all(24.0),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // C·ªôt tr√°i
                            Expanded(
                              child: Column(
                                children: [
                                  _buildTextFormField(
                                    controller: _codeController,
                                    label: 'M√£ h·ªçc ph·∫ßn',
                                    hint: 'Nh·∫≠p m√£ h·ªçc ph·∫ßn',
                                    errorText: _codeApiError,
                                    readOnly: _isEditMode,
                                    validator: (value) =>
                                    (value?.isEmpty ?? true)
                                        ? 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                                        : null,
                                  ),
                                  const SizedBox(height: 16),
                                  _buildTextFormField(
                                    controller: _creditsController,
                                    label: 'S·ªë t√≠n ch·ªâ',
                                    hint: 'Nh·∫≠p s·ªë t√≠n ch·ªâ',
                                    keyboardType: TextInputType.number,
                                    validator: (value) {
                                      if (value?.isEmpty ?? true)
                                        return 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
                                      if (int.tryParse(value!) == null)
                                        return 'Ph·∫£i l√† s·ªë';
                                      return null;
                                    },
                                  ),
                                  const SizedBox(height: 16),
                                  // Tr∆∞·ªùng Dropdown Khoa (CH·ªà C·∫¶N TRUY·ªÄN D·ªÆ LI·ªÜU ƒê√É T·∫¢I)
                                  _buildDropdownKhoa(departments),
                                ],
                              ),
                            ),
                            const SizedBox(width: 24),
                            // C·ªôt ph·∫£i
                            Expanded(
                              child: Column(
                                children: [
                                  _buildTextFormField(
                                    controller: _nameController,
                                    label: 'T√™n h·ªçc ph·∫ßn',
                                    hint: 'Nh·∫≠p t√™n h·ªçc ph·∫ßn',
                                    validator: (value) =>
                                    (value?.isEmpty ?? true)
                                        ? 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                                        : null,
                                  ),
                                  const SizedBox(height: 16),
                                  // Tr∆∞·ªùng Dropdown Lo·∫°i h·ªçc ph·∫ßn
                                  _buildDropdownLoai(),
                                  const SizedBox(height: 16),
                                  // Th√™m kho·∫£ng tr·∫Øng t∆∞∆°ng ƒë∆∞∆°ng 1 tr∆∞·ªùng
                                  const SizedBox(height: 56 + 8),
                                ],
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        // M√¥ t·∫£ (d√†i h·∫øt)
                        _buildTextFormField(
                          controller: _descriptionController,
                          label: 'M√¥ t·∫£',
                          hint: 'Nh·∫≠p m√¥ t·∫£',
                          maxLines: 3,
                          minLines: 3,
                        ),
                        const SizedBox(height: 24),
                        const Divider(),
                        const SizedBox(height: 16),
                        // Footer (Buttons)
                        Row(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: [
                            // N√∫t H·ªßy (N·ªÅn tr·∫Øng, vi·ªÅn ƒë·ªè, to v√† r·ªông h∆°n)
                            SizedBox(
                              height: 50, // Chi·ªÅu cao c·ªë ƒë·ªãnh cho n√∫t
                              child: OutlinedButton(
                                onPressed: _isSaving ? null : () => Navigator.of(context).pop(), // V√¥ hi·ªáu h√≥a khi ƒëang l∆∞u
                                style: OutlinedButton.styleFrom(
                                  padding: const EdgeInsets.symmetric(horizontal: 24), // Gi·∫£m vertical padding
                                  shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(8.0)),
                                  side: const BorderSide(color: Colors.red, width: 1.5),
                                  backgroundColor: Colors.white, // N·ªÅn tr·∫Øng
                                  foregroundColor: Colors.red,
                                ),
                                child:
                                const Text('H·ªßy b·ªè', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600)),
                              ),
                            ),
                            const SizedBox(width: 16),
                            // N√∫t X√°c nh·∫≠n (N·ªÅn xanh l√°, to v√† r·ªông h∆°n)
                            SizedBox(
                              height: 50, // Chi·ªÅu cao c·ªë ƒë·ªãnh cho n√∫t
                              child: ElevatedButton(
                                onPressed: _isSaving ? null : _submitForm, // V√¥ hi·ªáu h√≥a khi ƒëang l∆∞u
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: const Color(0xFF4CAF50), // M√†u xanh l√°
                                  padding: const EdgeInsets.symmetric(horizontal: 24), // Gi·∫£m vertical padding
                                  shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(8.0)),
                                  foregroundColor: Colors.white,
                                ),
                                child: _isSaving
                                    ? const SizedBox(
                                  width: 20,
                                  height: 20,
                                  child: CircularProgressIndicator(color: Colors.white, strokeWidth: 3),
                                )
                                    : Text(
                                    _isEditMode
                                        ? 'L∆∞u thay ƒë·ªïi'
                                        : 'X√°c nh·∫≠n',
                                    style: const TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w600)),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  // == Helper build Dropdowns (ƒê√£ b·ªè FutureBuilder) ==

  // S·ª¨A: H√†m n√†y nh·∫≠n departments ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ FutureBuilder b√™n ngo√†i
  Widget _buildDropdownKhoa(List<Department> departments) {

    // 1. Tr∆∞·ªùng h·ª£p L·ªói ho·∫∑c r·ªóng
    if (departments.isEmpty) {
      String hintText = 'Kh√¥ng c√≥ d·ªØ li·ªáu khoa';

      return _buildTextFormField(
        label: 'Khoa ph·ª• tr√°ch',
        hint: hintText,
        readOnly: true,
        validator: (value) => null,
      );
    }

    // 2. Tr∆∞·ªùng h·ª£p Th√†nh c√¥ng (Hi·ªÉn th·ªã Dropdown)
    return _buildDropdownField<int>(
      label: 'Khoa ph·ª• tr√°ch',
      hint: '--Ch·ªçn khoa ph·ª• tr√°ch--',
      // S·ª¨A: Gi√° tr·ªã ƒë∆∞·ª£c gi·ªØ b·ªüi _selectedDepartmentId (ƒë∆∞·ª£c set trong initState)
      value: _selectedDepartmentId,
      items: departments.map((dept) {
        return DropdownMenuItem<int>(
          value: dept.id,
          child: Text(dept.name),
        );
      }).toList(),
      onChanged: (int? value) {
        setState(() {
          _selectedDepartmentId = value;
        });
      },
      validator: (value) => value == null ? 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' : null,
    );
  }

  Widget _buildDropdownLoai() {
    // Th√™m ch·ªâ ƒë·ªãnh ki·ªÉu <String> cho _buildDropdownField
    return _buildDropdownField<String>(
      label: 'Lo·∫°i h·ªçc ph·∫ßn',
      hint: '--Ch·ªçn lo·∫°i h·ªçc ph·∫ßn--',
      value: _selectedType,
      items: _courseTypes.map((type) {
        return DropdownMenuItem<String>(
          value: type,
          child: Text(type),
        );
      }).toList(),
      // Ch·ªâ ƒë·ªãnh ki·ªÉu r√µ r√†ng cho onChanged
      onChanged: (String? value) {
        setState(() => _selectedType = value);
      },
      validator: (value) => value == null ? 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' : null,
    );
  }

  // == Helper build Text & Dropdown (Gi·ªëng nhau cho c√°c form) ==

  Widget _buildTextFormField({
    TextEditingController? controller, // <--- ƒê√£ s·ª≠a l·ªói missing argument
    required String label,
    required String hint,
    String? errorText, // TH√äM: Tham s·ªë ƒë·ªÉ hi·ªÉn th·ªã l·ªói API
    bool readOnly = false,
    int maxLines = 1,
    int minLines = 1,
    TextInputType? keyboardType,
    String? Function(String?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('$label ${validator != null ? '*' : ''}',

            style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 14)),
        const SizedBox(height: 8),
        TextFormField(
          controller: controller,
          readOnly: readOnly,
          keyboardType: keyboardType,
          maxLines: maxLines,
          minLines: minLines,
          decoration: InputDecoration(
            hintText: hint,
            errorText: errorText, // HI·ªÇN TH·ªä L·ªñI API
            filled: true,
            fillColor: readOnly ? Colors.grey[100] : Colors.white,
            // S·ª¨A L·ªñI: Th√™m borderSide
            border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8.0),
                borderSide: BorderSide(color: Colors.grey.shade300)),
            enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8.0),
                borderSide: BorderSide(color: Colors.grey.shade300)),
            focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8.0),
                borderSide: BorderSide(color: tluBlue)),
          ),
          validator: (value) {
            // N·∫øu c√≥ l·ªói API, b·ªè qua validator th∆∞·ªùng quy
            if (_codeApiError != null && label.contains('M√£ h·ªçc ph·∫ßn')) return null;
            return validator?.call(value);
          },
          // S·ª¨A: Th√™m onChanged ƒë·ªÉ reset l·ªói API khi ng∆∞·ªùi d√πng g√µ l·∫°i
          onChanged: (value) {
            if (_codeApiError != null && label.contains('M√£ h·ªçc ph·∫ßn')) {
              setState(() {
                _codeApiError = null;
              });
            }
          },
        ),
      ],
    );
  }

  Widget _buildDropdownField<T>({
    required String label,
    required String hint,
    required T? value,
    required List<DropdownMenuItem<T>> items,
    required void Function(T?)? onChanged,
    String? Function(T?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('$label ${validator != null ? '*' : ''}',
            style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 14)),
        const SizedBox(height: 8),
        DropdownButtonFormField<T>(
          value: value,
          items: items,
          onChanged: onChanged,
          validator: validator,
          decoration: InputDecoration(
            hintText: hint,
            filled: true,
            fillColor: onChanged == null ? Colors.grey[100] : Colors.white, // M√†u x√°m n·∫øu b·ªã v√¥ hi·ªáu h√≥a
            // S·ª¨A L·ªñI: Th√™m borderSide
            border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8.0),
                borderSide: BorderSide(color: Colors.grey.shade300)),
            enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8.0),
                borderSide: BorderSide(color: Colors.grey.shade300)),
            focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8.0),
                borderSide: BorderSide(color: tluBlue)),
          ),
          isExpanded: true,
        ),
      ],
    );
  }
} // === K·∫æT TH√öC CLASS _AddEditCourseDialogState ===

// ==========================================================
// 3. DIALOG X√ÅC NH·∫¨N X√ìA (H√†m d√πng chung - ƒê√É CƒÇN CH·ªàNH N√öT)
// ==========================================================
// TH√äM: Tham s·ªë onConfirmDelete
Future<dynamic> showDeleteConfirmationDialog(
    BuildContext context, {
      required String title,
      required String content,
      required Future<void> Function() onConfirmDelete, // <--- TH√äM
    }) {
  return showDialog<dynamic>( // S·ª¨A: Tr·∫£ v·ªÅ dynamic ƒë·ªÉ c√≥ th·ªÉ l√† bool ho·∫∑c Exception
    context: context,
    builder: (BuildContext context) {
      bool _isDeleting = false;
      return StatefulBuilder(
          builder: (context, setDialogState) {
            return AlertDialog(
              // S·ª¨A GIAO DI·ªÜN DIALOG X√ìA
              shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
              title: const Center(
                child: Text(
                  'Th√¥ng b√°o!', // S·ª¨A: Lu√¥n d√πng 'Th√¥ng b√°o!'
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
              ),
              content: Text(
                content, // N·ªôi dung ƒë·ªông
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 16, color: Colors.black87),
              ),
              actionsAlignment: MainAxisAlignment.center,
              actionsPadding: const EdgeInsets.symmetric(horizontal: 24, vertical: 20), // ƒêi·ªÅu ch·ªânh padding
              actions: <Widget>[
                // N√∫t H·ªßy (N·ªÅn tr·∫Øng, vi·ªÅn ƒë·ªè, to v√† r·ªông h∆°n)
                Expanded(
                  child: SizedBox(
                    height: 50, // Chi·ªÅu cao c·ªë ƒë·ªãnh
                    child: OutlinedButton(
                      onPressed: _isDeleting ? null : () => Navigator.of(context).pop(false), // V√¥ hi·ªáu h√≥a khi ƒëang x√≥a
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(horizontal: 24), // Gi·∫£m vertical padding
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8.0)),
                        side: const BorderSide(color: Colors.red, width: 1.5),
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.red,
                      ),
                      child:
                      const Text('H·ªßy', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600)),
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                // N√∫t X√°c nh·∫≠n (N·ªÅn xanh l√°, to v√† r·ªông h∆°n)
                Expanded(
                  child: SizedBox(
                    height: 50, // Chi·ªÅu cao c·ªë ƒë·ªãnh
                    child: ElevatedButton(
                      onPressed: _isDeleting ? null : () async { // TH√äM 'async'
                        setDialogState(() { _isDeleting = true; }); // B·∫Øt ƒë·∫ßu loading

                        try {
                          // CH·ªú cho vi·ªác g·ªçi API x√≥a v√† refresh data ho√†n t·∫•t
                          await onConfirmDelete();
                          // N·∫øu th√†nh c√¥ng, ƒë√≥ng dialog v√† tr·∫£ v·ªÅ true
                          if (context.mounted) Navigator.of(context).pop(true);
                        } catch (e) {
                          // N·∫øu th·∫•t b·∫°i, ƒë√≥ng dialog v√† tr·∫£ v·ªÅ l·ªói
                          if (context.mounted) Navigator.of(context).pop(e as Exception);
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF4CAF50), // M√†u xanh l√°
                        padding: const EdgeInsets.symmetric(horizontal: 24), // Gi·∫£m vertical padding
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8.0)),
                      ),
                      // HI·ªÇN TH·ªä LOADING XOAY TR√íN
                      child: _isDeleting
                          ? const SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(color: Colors.white, strokeWidth: 3),
                      )
                          : const Text('X√°c nh·∫≠n',
                          style: TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w600)),
                    ),
                  ),
                ),
              ],
            );
          }
      );
    },
  );
}