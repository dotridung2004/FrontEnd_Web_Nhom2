import 'package:flutter/material.dart';
import 'home_screen.dart'; // <-- Trang ch·ªß ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn

// --- üëá B·∫ÆT ƒê·∫¶U TH√äM M·ªöI ---
// (S·ª≠ d·ª•ng '../' n·∫øu t·ªáp n√†y n·∫±m trong th∆∞ m·ª•c con nh∆∞ 'lib/screens/')
import '../api_service.dart'; // Nh·∫≠p ApiService
import '../table/user.dart';   // Nh·∫≠p Model User
// --- üëÜ K·∫æT TH√öC TH√äM M·ªöI ---


class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  // Bi·∫øn ƒë·ªÉ qu·∫£n l√Ω vi·ªác ·∫©n/hi·ªán m·∫≠t kh·∫©u
  bool _isPasswordHidden = true;

  // --- üëá B·∫ÆT ƒê·∫¶U TH√äM M·ªöI (T·ª™ LOGIC API) ---
  // 1. Service v√† Controllers
  final ApiService _apiService = ApiService(); // L·∫•y th·ª±c th·ªÉ Singleton
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  // 2. Bi·∫øn tr·∫°ng th√°i
  bool _isLoading = false;
  String _errorMessage = '';
  // --- üëÜ K·∫æT TH√öC TH√äM M·ªöI (T·ª™ LOGIC API) ---

  // M√†u s·∫Øc ch·ªß ƒë·∫°o t·ª´ h√¨nh ·∫£nh
  final Color tluLogoBlue = Color(0xFF005A9C); // M√†u xanh ƒë·∫≠m c·ªßa logo TLU
  final Color leftPanelBg = Color(0xFF5C9DFF); // M√†u xanh nh·∫°t b√™n tr√°i
  final Color loginButtonBlue = Color(0xFF4295F7); // M√†u n√∫t ƒëƒÉng nh·∫≠p
  final Color forgotPasswordRed = Color(0xFFE53935); // M√†u ƒë·ªè "Qu√™n m·∫≠t kh·∫©u"

  // --- üëá B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI H√ÄM N√ÄY ---
  /// X·ª≠ l√Ω logic khi nh·∫•n n√∫t ƒêƒÉng nh·∫≠p
  Future<void> _handleLogin() async {
    // ·∫®n b√†n ph√≠m
    FocusScope.of(context).unfocus();

    // Ki·ªÉm tra n·∫øu ƒëang loading th√¨ kh√¥ng l√†m g√¨ c·∫£
    if (_isLoading) return;

    setState(() {
      _isLoading = true;
      _errorMessage = '';
    });

    try {
      // 1. L·∫•y email v√† password t·ª´ controllers
      final String email = _emailController.text.trim();
      final String password = _passwordController.text.trim();

      // (T√πy ch·ªçn) Ki·ªÉm tra r·ªóng c∆° b·∫£n
      if (email.isEmpty || password.isEmpty) {
        throw Exception("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√†i kho·∫£n v√† m·∫≠t kh·∫©u.");
      }

      // 2. G·ªçi API Service
      // *** ƒê√ÇY L√Ä K·∫æT N·ªêI CH√çNH ***
      // ApiService ƒë√£ t·ª± ki·ªÉm tra status == 'active'.
      // N·∫øu kh√¥ng active, n√≥ s·∫Ω throw Exception v√† nh·∫£y xu·ªëng catch.
      final User user = await _apiService.login(email, password);

      // 3. KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P (ROLE)
      if (user.role == 'training_office') {
        // 3a. ƒêƒÉng nh·∫≠p th√†nh c√¥ng V√Ä ƒë√∫ng quy·ªÅn
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn Trang ch·ªß
        if (mounted) { // Ki·ªÉm tra Widget c√≤n t·ªìn t·∫°i
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const HomeScreen()),
          );
        }
      } else {
        // 3b. ƒêƒÉng nh·∫≠p th√†nh c√¥ng NH∆ØNG sai quy·ªÅn
        // N√©m l·ªói ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
        throw Exception(
            'T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p (Ch·ªâ d√†nh cho Ph√≤ng ƒë√†o t·∫°o).');
      }
      // --- üëÜ K·∫æT TH√öC S·ª¨A ƒê·ªîI H√ÄM N√ÄY ---

    } catch (e) {
      // 4. X·ª≠ l√Ω l·ªói (t·ª´ API ho·∫∑c t·ª´ Exception tr√™n)
      setState(() {
        // e.toString() s·∫Ω l·∫•y message t·ª´ `throw Exception(...)`
        _errorMessage = e.toString().replaceFirst("Exception: ", "");
      });
    } finally {
      // 5. D·ª´ng loading
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    // H·ªßy controllers khi kh√¥ng c·∫ßn thi·∫øt
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }
  // --- üëÜ K·∫æT TH√öC H√ÄM M·ªöI (T·ª™ LOGIC API) ---


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // M√†u n·ªÅn x√°m nh·∫°t cho to√†n b·ªô m√†n h√¨nh
      backgroundColor: Color(0xFFF0F4F8),
      body: Center(
        child: LayoutBuilder(
          builder: (context, constraints) {
            // Ki·ªÉm tra chi·ªÅu r·ªông m√†n h√¨nh ƒë·ªÉ quy·∫øt ƒë·ªãnh layout
            if (constraints.maxWidth > 800) {
              // Layout cho m√†n h√¨nh r·ªông (Desktop, Tablet)
              return _buildWideLayout();
            } else {
              // Layout cho m√†n h√¨nh h·∫πp (ƒêi·ªán tho·∫°i)
              return _buildNarrowLayout();
            }
          },
        ),
      ),
    );
  }

  // --- üëá B·∫ÆT ƒê·∫¶U C√ÅC H√ÄM LAYOUT B·ªä THI·∫æU ---

  /// Layout cho m√†n h√¨nh r·ªông (Desktop/Tablet)
  Widget _buildWideLayout() {
    return Container(
      width: 900, // Chi·ªÅu r·ªông c·ªë ƒë·ªãnh c·ªßa card
      height: 600, // Chi·ªÅu cao c·ªë ƒë·ªãnh c·ªßa card
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(24.0),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 15,
            offset: Offset(0, 5),
          ),
        ],
      ),
      // ClipRRect ƒë·ªÉ ƒë·∫£m b·∫£o c√°c con b√™n trong c≈©ng b·ªã c·∫Øt theo g√≥c bo
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24.0),
        child: Row(
          children: [
            // C·ªôt b√™n tr√°i (m√†u xanh)
            Expanded(child: _buildLeftPanel()),
            // C·ªôt b√™n ph·∫£i (form ƒëƒÉng nh·∫≠p)
            Expanded(child: _buildRightPanel(isMobile: false)),
          ],
        ),
      ),
    );
  }

  /// Layout cho m√†n h√¨nh h·∫πp (ƒêi·ªán tho·∫°i)
  Widget _buildNarrowLayout() {
    return SingleChildScrollView(
      child: Container(
        width: double.infinity,
        margin: EdgeInsets.all(24.0),
        padding: EdgeInsets.all(32.0),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(24.0),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              offset: Offset(0, 5),
            ),
          ],
        ),
        // Ch·ªâ hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p, v·ªõi logo ·ªü tr√™n
        child: _buildRightPanel(isMobile: true),
      ),
    );
  }

  /// Widget cho c·ªôt b√™n tr√°i (th√¥ng tin TLU v√† h√¨nh ·∫£nh)
  Widget _buildLeftPanel() {
    return Container(
      color: leftPanelBg,
      padding: EdgeInsets.all(40.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Logo
          Row(
            children: [
              CircleAvatar(
                radius: 32,
                backgroundColor: tluLogoBlue, // M√†u logo TLU t·ª´ ·∫£nh
                child: Text(
                  "TLU",
                  style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 26),
                ),
              ),
              SizedBox(width: 16),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "Thuy Loi",
                    style: TextStyle(
                        color: Colors.white,
                        fontSize: 20,
                        fontWeight: FontWeight.bold),
                  ),
                  Text(
                    "University",
                    style: TextStyle(color: Colors.white, fontSize: 18),
                  ),
                ],
              )
            ],
          ),
          SizedBox(height: 24),
          // T√™n ·ª©ng d·ª•ng
          Text(
            "Teaching Schedule",
            style: TextStyle(
                color: Colors.white.withOpacity(0.9),
                fontSize: 22,
                fontWeight: FontWeight.w300),
          ),
          Spacer(),
          // --- H√åNH ·∫¢NH ---
          // ƒê·∫¢M B·∫¢O B·∫†N ƒê√É th√™m ·∫£nh v√†o 'assets/images/login_graphic.png'
          // v√† khai b√°o trong pubspec.yaml
          Center(
            child: Image.asset(
              'assets/images/login_graphic.png', // <-- ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh c·ªßa b·∫°n
              height: 250, // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc n·∫øu c·∫ßn
              errorBuilder: (context, error, stackTrace) {
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu kh√¥ng t√¨m th·∫•y ·∫£nh
                return Container(
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    children: [
                      Icon(Icons.image_not_supported_outlined,
                          size: 80, color: Colors.white.withOpacity(0.8)),
                      SizedBox(height: 10),
                      Text(
                        "Kh√¥ng t√¨m th·∫•y ·∫£nh t·∫°i:\n'assets/images/login_graphic.png'\n\nVui l√≤ng ki·ªÉm tra l·∫°i pubspec.yaml",
                        textAlign: TextAlign.center,
                        style: TextStyle(
                            color: Colors.white70, fontStyle: FontStyle.italic),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
          Spacer(),
        ],
      ),
    );
  }

  // --- üëÜ K·∫æT TH√öC C√ÅC H√ÄM LAYOUT B·ªä THI·∫æU ---


  /// Widget cho c·ªôt b√™n ph·∫£i (Form ƒëƒÉng nh·∫≠p)
  Widget _buildRightPanel({required bool isMobile}) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 48.0, vertical: 40.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Hi·ªÉn th·ªã logo TLU ·ªü tr√™n n·∫øu l√† layout mobile
          if (isMobile) ...[
            Center(
              child: CircleAvatar(
                radius: 32,
                backgroundColor: tluLogoBlue,
                child: Text(
                  "TLU",
                  style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 26),
                ),
              ),
            ),
            SizedBox(height: 32),
          ],

          // Ti√™u ƒë·ªÅ
          Text(
            "ƒêƒÉng nh·∫≠p",
            style: TextStyle(
                fontSize: 32,
                fontWeight: FontWeight.bold,
                color: Colors.black87),
          ),
          SizedBox(height: 32),

          // Form T√†i kho·∫£n
          Text(
            "T√†i kho·∫£n",
            style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.black54),
          ),
          SizedBox(height: 8),
          TextFormField(
            // --- üëá B·∫ÆT ƒê·∫¶U THAY ƒê·ªîI ---
            controller: _emailController, // G·∫Øn controller
            keyboardType: TextInputType.emailAddress,
            // --- üëÜ K·∫æT TH√öC THAY ƒê·ªîI ---
            decoration: InputDecoration(
              hintText: "Nh·∫≠p t√†i kho·∫£n (email)", // S·ª≠a hint
              contentPadding: EdgeInsets.symmetric(vertical: 16, horizontal: 16),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: Colors.grey.shade300),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: Colors.grey.shade300),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: loginButtonBlue, width: 2.0),
              ),
            ),
          ),
          SizedBox(height: 24),

          // Form M·∫≠t kh·∫©u
          Text(
            "M·∫≠t kh·∫©u",
            style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: Colors.black54),
          ),
          SizedBox(height: 8),
          TextFormField(
            // --- üëá B·∫ÆT ƒê·∫¶U THAY ƒê·ªîI ---
            controller: _passwordController, // G·∫Øn controller
            // --- üëÜ K·∫æT TH√öC THAY ƒê·ªîI ---
            obscureText: _isPasswordHidden, // ·∫®n m·∫≠t kh·∫©u
            decoration: InputDecoration(
              hintText: "Nh·∫≠p m·∫≠t kh·∫©u",
              contentPadding: EdgeInsets.symmetric(vertical: 16, horizontal: 16),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: Colors.grey.shade300),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: Colors.grey.shade300),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12.0),
                borderSide: BorderSide(color: loginButtonBlue, width: 2.0),
              ),
              // Icon ƒë·ªÉ ·∫©n/hi·ªán m·∫≠t kh·∫©u
              suffixIcon: IconButton(
                icon: Icon(
                  _isPasswordHidden
                      ? Icons.visibility_off_outlined
                      : Icons.visibility_outlined,
                  color: Colors.grey,
                ),
                onPressed: () {
                  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªÉ v·∫Ω l·∫°i UI
                  setState(() {
                    _isPasswordHidden = !_isPasswordHidden;
                  });
                },
              ),
            ),
          ),
          SizedBox(height: 16),

          // Link Qu√™n m·∫≠t kh·∫©u
          Align(
            alignment: Alignment.centerRight,
            child: TextButton(
              onPressed: () {
                // TODO: X·ª≠ l√Ω s·ª± ki·ªán qu√™n m·∫≠t kh·∫©u
              },
              child: Text(
                "Qu√™n m·∫≠t kh·∫©u",
                style: TextStyle(
                    color: forgotPasswordRed, fontWeight: FontWeight.w600),
              ),
            ),
          ),
          SizedBox(height: 24),

          // --- üëá B·∫ÆT ƒê·∫¶U THAY ƒê·ªîI ---
          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói (n·∫øu c√≥)
          if (_errorMessage.isNotEmpty) ...[
            Container(
              width: double.infinity,
              child: Text(
                _errorMessage,
                style: TextStyle(color: forgotPasswordRed, fontSize: 14),
                textAlign: TextAlign.center,
              ),
            ),
            SizedBox(height: 16),
          ],
          // --- üëÜ K·∫æT TH√öC THAY ƒê·ªîI ---

          // N√∫t ƒêƒÉng nh·∫≠p
          SizedBox(
            width: double.infinity,
            height: 50,
            child: ElevatedButton(
              // --- üëá B·∫ÆT ƒê·∫¶U THAY ƒê·ªîI ---
              // G·ªçi h√†m _handleLogin khi nh·∫•n
              // V√¥ hi·ªáu h√≥a n√∫t n·∫øu ƒëang loading
              onPressed: _isLoading ? null : _handleLogin,
              // --- üëÜ K·∫æT TH√öC THAY ƒê·ªîI ---
              child: _isLoading
                  ? CircularProgressIndicator( // Hi·ªÉn th·ªã v√≤ng xoay
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              )
                  : Text( // Hi·ªÉn th·ªã text
                "ƒêƒÉng nh·∫≠p",
                style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: loginButtonBlue, // M√†u n√∫t
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12.0),
                ),
                elevation: 5,
                shadowColor: loginButtonBlue.withOpacity(0.5),
              ),
            ),
          ),
        ],
      ),
    );
  }
}