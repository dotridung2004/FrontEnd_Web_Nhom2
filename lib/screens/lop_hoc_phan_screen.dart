import 'package:flutter/material.dart';
import '../api_service.dart';
import '../models/class_course.dart'; // ƒê·∫£m b·∫£o ƒë√£ t·∫°o model n√†y

class LopHocPhanScreen extends StatefulWidget {
  const LopHocPhanScreen({Key? key}) : super(key: key);

  @override
  _LopHocPhanScreenState createState() => _LopHocPhanScreenState();
}

class _LopHocPhanScreenState extends State<LopHocPhanScreen> {
  // M√†u s·∫Øc
  final Color tluBlue = const Color(0xFF005A9C);
  final Color iconView = Colors.blue;
  final Color iconEdit = Colors.green;
  final Color iconDelete = Colors.red;

  // State cho FutureBuilder
  late Future<List<ClassCourse>> _classCoursesFuture;
  final ApiService _apiService = ApiService();

  @override
  void initState() {
    super.initState();
    // G·ªçi API ngay khi v√†o trang
    _classCoursesFuture = _apiService.fetchClassCourses();
  }

  // H√†m build UI ch√≠nh
  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<ClassCourse>>(
      future: _classCoursesFuture,
      builder: (context, snapshot) {
        // 1. Tr·∫°ng th√°i ƒêang t·∫£i
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        }

        // 2. Tr·∫°ng th√°i L·ªói
        if (snapshot.hasError) {
          return Center(
            child: Text(
              'L·ªói khi t·∫£i d·ªØ li·ªáu: ${snapshot.error}',
              style: TextStyle(color: Colors.red),
            ),
          );
        }

        // 3. Tr·∫°ng th√°i Kh√¥ng c√≥ d·ªØ li·ªáu
        if (!snapshot.hasData || snapshot.data!.isEmpty) {
          // V·∫´n hi·ªÉn th·ªã UI (v·ªõi b·∫£ng r·ªóng) ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ "Th√™m"
          return _buildContent(context, []);
        }

        // 4. Tr·∫°ng th√°i Th√†nh c√¥ng
        return _buildContent(context, snapshot.data!);
      },
    );
  }

  /// Widget ch·ª©a n·ªôi dung (Ti√™u ƒë·ªÅ, N√∫t, B·∫£ng)
  Widget _buildContent(BuildContext context, List<ClassCourse> classCourses) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 1. N√∫t Th√™m v√† T√¨m ki·∫øm (ƒê√£ s·ª≠a layout)
          // üëá === THAY ƒê·ªîI T·ª™ WRAP TH√ÄNH ROW === üëá
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween, // ƒê·∫©y 2 item ra 2 b√™n
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              // N√∫t "Th√™m l·ªõp h·ªçc ph·∫ßn" (B√äN TR√ÅI)
              ElevatedButton.icon(
                onPressed: () { /* TODO: X·ª≠ l√Ω Th√™m */ },
                icon: Icon(Icons.add, color: Colors.white, size: 20),
                label: Text("Th√™m l·ªõp h·ªçc ph·∫ßn", style: TextStyle(color: Colors.white, fontSize: 14, fontWeight: FontWeight.w600)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: tluBlue,
                  padding: const EdgeInsets.symmetric(
                      horizontal: 20, vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0),
                  ),
                ),
              ),

              // Thanh "T√¨m ki·∫øm" (B√äN PH·∫¢I)
              Container(
                width: 300,
                child: TextField(
                  decoration: InputDecoration(
                    hintText: "T√¨m ki·∫øm",
                    prefixIcon: Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    filled: true,
                    fillColor: Colors.white,
                    contentPadding:
                    const EdgeInsets.symmetric(vertical: 12.0),
                  ),
                  onChanged: (value) { /* TODO: X·ª≠ l√Ω T√¨m ki·∫øm */ },
                ),
              ),
            ],
          ),
          // üëÜ === K·∫æT TH√öC THAY ƒê·ªîI === üëÜ
          const SizedBox(height: 24),

          // 2. B·∫£ng D·ªØ li·ªáu
          Container(
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(8.0),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: LayoutBuilder(builder: (context, constraints) {
              return SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: ConstrainedBox(
                  constraints: BoxConstraints(minWidth: constraints.maxWidth),
                  child: DataTable(
                    headingRowColor: MaterialStateProperty.all(tluBlue),
                    headingTextStyle: TextStyle(
                        color: Colors.white, fontWeight: FontWeight.bold),
                    // Ti√™u ƒë·ªÅ c·ªôt kh·ªõp v·ªõi ·∫£nh
                    columns: const [
                      DataColumn(label: Text('STT')),
                      DataColumn(label: Text('T√™n l·ªõp h·ªçc ph·∫ßn')),
                      DataColumn(label: Text('Gi·∫£ng vi√™n ph·ª• tr√°ch')),
                      DataColumn(label: Text('Khoa')),
                      DataColumn(label: Text('H·ªçc ph·∫ßn')),
                      DataColumn(label: Text('H·ªçc k·ª≥')),
                      DataColumn(label: Text('Thao t√°c')),
                    ],
                    rows: List.generate(
                      classCourses.length,
                          (index) => _buildDataRow(index + 1, classCourses[index]),
                    ),
                  ),
                ),
              );
            }),
          ),
        ],
      ),
    );
  }

  /// Helper ƒë·ªÉ t·∫°o m·ªôt h√†ng d·ªØ li·ªáu (DataRow)
  DataRow _buildDataRow(int stt, ClassCourse classCourse) {
    return DataRow(
      cells: [
        DataCell(Text(stt.toString())),
        DataCell(Text(classCourse.name)),
        DataCell(Text(classCourse.teacherName)),
        DataCell(Text(classCourse.departmentName)),
        DataCell(Text(classCourse.courseName)),
        DataCell(Text(classCourse.semester)),
        DataCell(
          Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: Icon(Icons.info_outline, color: iconView),
                onPressed: () { /* TODO: X·ª≠ l√Ω View */ },
                tooltip: "Xem",
              ),
              IconButton(
                icon: Icon(Icons.edit_outlined, color: iconEdit),
                onPressed: () { /* TODO: X·ª≠ l√Ω Edit */ },
                tooltip: "S·ª≠a",
              ),
              IconButton(
                icon: Icon(Icons.delete_outline, color: iconDelete),
                onPressed: () { /* TODO: X·ª≠ l√Ω Delete */ },
                tooltip: "X√≥a",
              ),
            ],
          ),
        ),
      ],
    );
  }
}

